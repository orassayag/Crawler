Complete + canceled tasks:
==========================
-Update packages + Recreate package-lock.json. *
-Create directory for the mongo model + index.js file + Change in all places + Verify all works well. *
-Update packages + Recreate package-lock.json. *
-Take the 'getCurrentDate' function from the 'event-dates-calendar' project. *
-All time logic is in place + Take the 'getCurrentDate' function from the 'event-dates-calendar' project. *
-Convert in all places from all versions of canceled keyword to 'Canceled' keyword. *
-Add in all places 'name.model' to all models. *
-Check that in all places the name of the file includes the name of tha parent directory. For example: name.model inside 'models' directory. *
-Don't forget to do the same rename logic for all the enums in the project. *
-Change in all places the config from 'misc/backup' to 'misc/backups' directory. *
-Change all (where it's possible) from 'console.log' to 'logUtils.log'. *
-Take the latest settings from '.vscode/settings.json' and implement them. *
-Change in all places that globalUtils will be on top. *
-Replace the 'getCurrentDate' method with the updated one from the 'udemy-courses' project. *
-Copy the '.eslintignore' file from the 'udemy-courses' project. *
-Add to the 'package.json' file (below the 'description' field) the 'repository' field: *
"repository": { *
  "type": "git", *
  "url": "git://github.com/username/repository.git" *
} * 
-Update packages + Recreate package-lock.json. *
-Clear unused enums and make sure all in used really exists. *
-Remove the 'destination' parameter in the 'filterDirectories' method + Verify that backup still works. *
-Due to the break changes of log-update packages, there is a need to use a postinstall script to fix the direct file: *
1. Remove the 'wrap-ansi', 'slice-ansi', 'cli-cursor', 'ansi-escapes' packages from the 'package.json' file. *
2. Delete the 'log-update' directory. *
3. Install the original 'log-update' package. *
4. Change in the 'log.utils' file to use the 'require('log-update');' syntax. *
5. Add the postinstall script, add the 'script/initiate.js' file. *
6. Add the 'INITIATE' key/value to the ScriptTypeEnum enum. *
7. Add the 'postinstall' script to the 'package.json file'. *
8. Run in the terminal 'npm i' + Recreate the 'package-lock.json' file. *
9. Format the 2 files. *
10. Make sure all work as expected. *
-Rename and check: countLimitService.countLimitDataModel.millisecondsSendEmailDelayCount. *
-Check and reset the '.vscode/settings.json' by 'C:/Or/Web/auto-packages-updater/auto-packages-updater/.vscode/settings.json' +
 Format all documents and re-add 'cSpell.words' all the words + add the 'cSpell.ignorePaths'. *
-Convert all 'new Date()' to be from the timeUtils. Change in all places. *
-In validation file path (probably a JSON file) there is a 'Expected a number' comment, need to fix it (take the comment from the 'auto-packages-updater' project). *
-Convert 'removeLastCharacter' to use 'removeLastCharacters'. *
-Make sure all switch-case have curly braces. *
-Make sure to have space between /* cSpell:disable */ in the 'INSTRUCTIONS.md' file. *
-Make sure to fix the grammar mistake in the 'enum.utils.js' file (an enum-like object). *
-In the 'README.md' file, fix in all places to 'In the terminal'. *
-Make sure that all places 'this.exit' function - Need to be 'await this.exit'. *
-Search for 'async ' and create a list of functions/methods, and make sure that all calls have await. *
-Scan all files for spell mistakes with the 'files-spell-checker' project. *
-In the 'package.json' file change to 'private: false'. *
-Remove code comments to a backup TXT file. *
-Remove the duplicate empty lines: \n\s*\n\s*\n *
-Remove the first empty line: ^(?<![\s])\n *
-Remove the last empty line: \n\s*$(?!\n) *
-Detect all comments without a dot at the end: ^// .*(?<!\.)$ *
-Format all documents. *
-Verify all works well. *
-Fix TXT files spell mistakes via Gmail. *
-Move all complete tasks from here to complete_tasks.txt. *
-Upload to GitHub. *
-Backup to iOmega. *
-Update packages + Recreate package-lock.json. *
-Comments: Change 'validateEnumData' to 'data'. *
-Remove the 'await' from 'await fileUtils.createDirectory(value);'. *
-In settings.js convert utils path to index, and check if it still works. *
-In all the maintenance projects: *
-Update packages + re-create package.json files. *
01. Update the 'REMEMBER' section of this document. *
02. ' all the outcome of the crawling will be created' comment should be updated. *
03. Add to package.json file the 'INSTRUCTIONS.md' key in the files section (if it exists in the project). *
04. In the initiate.service - const { Mode, ScriptTypeEnum } = require('../../core/enums/files/system.enum'); - Need to change to ../../core/enums. *
05. Check if async copyDirectory( is not with line break. *
06. Fix createDirectory - No need for await in createSessionDirectory method. *
07. 'Validate internet connection works.' => 'Validate that the internet connection works.' *
08. '...sending emails processes.' in udemy-courses project. *
09. Rename the function 'getFileData' to 'getJsonFileData'. *
10. Copy the logic of 'this.updateStatus' to all change statuses in the main script file. *
11. On udemy-courses project, change the 'validate' and 'compare' functions to 'validateFields' and 'compareCourses'. *
12. On udemy-courses project, change 'isExpectedFilled' to 'isFilledExpected'. *
13. Change all function names that return true/false to 'isValidXXX' in validationUtils. *
17. Accounts re-organization: *
a. Place the 'Accounts' directory inside 'C:\Users\Or\Dropbox'. *
b. Refer all the projects to this location. *
c. Make sure that after each path change the project still works. *
14. In all places change to use isExists instead of .length > 0 or .length <= 0. *
15. Copy the logic of retry on check internet connection in all relevant projects (like in the udemy courses project). *
16. Add to 'INSTRUCTIONS.md' how the console log should be (take the specific sentence from another project). *
18. Place this in all 'ToDo' documents of all the projects. *
16. Add 'INSTRUCTIONS.md' file if it does not exist (add it to files in package.json). *
17. Add to 'INSTRUCTIONS.md' how the console log should be (take the specific sentence from other project) + *
 /* cSpell:disable */ before the console log status example. *
19. Copy the 'updateCount' function (if exists) from 'sender' project. *
20. Update settings.json: * *
"formatFiles.excludePattern": "**/node_modules,**/.vscode,**/dist,**/dist/**,**/.chrome,**/misc,**/misc/**,**/sources,**/sources/**" *
21. Add to .eslintignore, .gitignore, .npmignore files: *
# Sources. *
sources/ *
/sources *
sources *
-Bring back production to true in settings.js. *
-Remove all comments. *
-Re-format error numbers + error_index.txt file. *
-Fix all spell mistakes via Gmail. *
-Format all files. *
-Verify all works as expected. *
-Upload to GitHub. *
-Backup iOmega. *
-Clear complete tasks. *
-Update packages + Re-create package.json files. *
-Replace database name to other name. *
-Replace the 'this.validateLinkRegex' from 'spam-revenge' project. *
-Remove comments. *
-Format all files. *
-Verify all works good for the night. *
-Update GitHub + iOmega. *
-Update packages. *
-Update the instructions.MD file with console status log view. *
-Verify all works well. *
-Add index.js (like in files-spell-checker project) to the configurations directory and change in all places in the application. *
-Remove 'DATA' keyword from section titles. *
-Add script name to tests and add validation for empty script name in initiate.service.js. *
-Go over timeUtils and make sure all local 'this.getDay' are being used, and not 'date.getDate()' for example. *
-Fix comment in settings.js 'interval to run to calculate' => 'interval to calculate'. *
-Fix comment:         // Get the backup title from the console.s *
-Fix the INSTRUCTIONS.md file - 5 is not needed. *
-Fix all README.me + package.json from 'create-react-up' to 'create-react-app'. *
-Change all ect => etc - In all projects. *
-Verify package.json project name. *
-Change all README.md files to the title of the project as first line (Only one #). *
-Change from 'Start to be built' to 'Built in', and remove space lines, and the *
'-Goal:', and remove the 'This project was bootstrapped with [Create React App] *
(https://github.com/facebook/create-react-app).' line under to the description *
with line space,  all fixes in README.md. *
-Re-format all error numbers + last_index.txt file. *
-Clear all comments. *
-Fix all misspells in all TXT files. *
-Format all documents. *
-Move all complete tasks to complete_tasks.txt. *
-Verify all works well. *
-Upload to GitHub. *
-Backup iOmega. *
-Try to merge between inner settings to settings - failed. *
-Do backup before rollback. *
-Try to recover this document from backup - failed. *
-Do rollback to latest backup. *
-Update packages. *
-Remove the 'todo_tasks.txt' from the ignored backup files. *
-Add the inner settings as a parameter in the settings, and do validation for the inner settings in the 'initiate service'. *
-Check the order of the parameters in the initiate.service.js (Titles order identical to settings.js order). *
-Update Packages. *
-Update packages. *
-Update packages + re-create package.json file. *
-Fix the 'replaceCharacter' function (if exists), according to the logic in 'udemy-courses' project, *
and replace it in all places (where you don't need a flag, pass '': regexUtils.createRegex(origin, ''). *
-Check for duplicate 'createDirectory' - remove it from global, and use the one from fileUtils. Take it from 'udemy-courses' project. *
-Fix unneeded formats with: "formatFiles.excludePattern": "**`/node_modules,**`/.vscode,**`/dist/`**,**`/.chrome,**`/misc". *
-Fix bug with backups - Modal not found: Error: Cannot find module '../core/models/files/BackupData'. *
-Add 'Complete + canceled tasks: *
==========================' to complete_tasks.txt. *
-Re-arrange tasks here (for example, Gibberish tasks already completed). *
-Update packages. *
-Re-create package.json file. *
-Change '    isProcessRunning = (processName) => {' to method like in the 'sender' project. *
-Check for empty lines inside functions / models with regular expression: ^\s*$ *
-Remove all comments. *
-Add logic to exit on mongoDatabase.service.js. *
-Add .catch(e => console.log(e)); to all (async () => { - Take the logic from 'crawler' project. *
-Format all files. *
-Verify all works. *
-Update GitHub. *
-Move all complete tasks to complete_tasks.txt. *
Gibberish task: *
=============== *
-Try to build a function to detect spam. If not working, ask in StackOverFlow for suggestions to detect spam. *
-In Sandbox.test.js there are tests to solve. *
-Add new log file of spam detect: *
14370afcdc17429f9e418d5ffbd0334a@domain.com *
ce06e817-2149-6cfd-dd24-51b31e93ea1a@domain.org.il *
87c0d782-e09f-056f-f544-c6ec9d17943c@domain.org.il *
root@ns3160176.ip-151-106-35.eu *
ds4-f1g-54-h5-dfg-yk-4gd-htr5-fdg5h@domain.com *
h-rt-dfg4-sv6-fg32-dsv5-vfd5-ds312@domain.com *
test@454-fs-ns-dff4-xhh-43d-frfs.com *
=> Asked question: https://stackoverflow.com/questions/65393659/javascript-script-to-detect-gibberish - Give it bounty tomorrow. *
-Update packages. *
-Take backup.logic.js file from 'mbox-crawler' project. *
-Change the 'initiate.service' according to 'mbox-crawler' changes (load all utils in one line + also in all places load 'fs-extra' instead of 'fs'). *
-Fix description in package.json + README.MD + re-create package.json-lock file. *
-Make sure spaces in all files between bottom, need to fix cases like this: *
} *
module.exports *
} *
export default *
-In initiate.service.js, need to re-write the utils imports - need to be the same imports for all utils. *
-Remove all the logic of adding or removing the puppeeter.js package according to development/production environment. It's not relevant anymore - Canceled. *
-Re-check all imports in the entire project (check for duplicate imports paths). *
-Sort alphabetically all imports: external packages, settings, (containers, components, store, assert) data, models, enums, services, utils. *
-Sort alphabetically by https://alphabetizer.flap.tv/. *
-Re-check all imports in the entire project (check for duplicate imports paths). *
-Replace all 'let' to 'const' and where no bugs - change it. *
-Check if comments of all backup parameters in settings.js are relevant to this project. *
-Update packages npm outdated --depth 9999. *
-Add 'Misc.' section to gitignore and npmignore files (include tasks txt files + backups directory). *
-Remove all unused files, functions, and variables. *
-In .eslintrc file - set "no-unused-vars": 1. *
-Clear all comments. *
-Rewrite error numbers. *
-Remove all 'debugger' keys. *
-Make sure all comments end with . *
-Fix TXT files spell mistakes. *
-Fix all spell mistakes in all TXT files. *
-Fix spell mistakes in all txt files. *
-Format all files. *
-Verify all works as expected. *
-Upload to GitHub. *
-Move all complete tasks from here to complete_tasks.txt. *
Maintenance:
============
-Copy the logic of nonNumeric in logProgress function from 'udemy-courses' project. *
-Add 	constructor() { *
		this.scriptType = null; *
	} *
In the initiateService.js *
-Add validation of 'isFilePath' and 'isDirectoryPath' in all relevant places. *
-Fix manually: test@test.c, hr-test@test.g, test@test.c. *
-Add to filter: 3c6b9c1e.0306242134.203da40c@posting.google.com *
-Need to be invalid: original: image005.png@01CBEDF1.1CFF5D70 | fix: image005.png@01cbedf1.1cff5d | functionIds: 3,27,-15 *
-Lower case the backup name. Copy the logic from the 'sender' project. *
-Invalid fix: original: jobsmedia@kahane.oil. | fix: jobsmedia@kahane.il | functionIds: 11,14. *
-Update the last error number in error_index.txt. *
-Remove all comments. *
-Fix TXT files spell mistakes. *
-Remove all unused files, functions, and variables. *
-Make sure all comments end with . *
-Format all files. *
-Remove all 'debugger' keys. *
-Rewrite error numbers. *
-Move all completed tasks to complete tasks text file. *
-Delete old project from github + Re-upload GitHub. *
-Delete from developer-Story in StackOverFlow + Re-add it. *
-Add gibberish tests: https://stackoverflow.com/questions/65393659/javascript-script-to-detect-gibberish/65467625#comment115755926_65467625 *
-Add gibberish detection service logic. If a local part is larger than 32 characters and the domain part is not common, check for detection. *
-If return true, do not include it on email addresses txt file, include it in a new log file. *
-Add flag for gibberish logic. *
-Add flag log for gibberish. *
-Add gibberish counter to the console status. *
-Remove all comments. *
-Fix TXT files spell mistakes. *
-Fix all spell mistakes in all TXT files.
-Remove all unused files, functions, and variables. *
-Make sure all comments end with .*
-Format all files. *
-Remove all 'debugger' keys. *
-Rewrite error numbers. *
-Move all completed tasks to complete tasks text file. *
-Delete old project from github + Re-upload GitHub. *
-Delete from developer-Story in StackOverFlow + Re-add it. *
-Exclude the todo_tasks.txt from this specific project in the backups and remove it on other backups. *
-Copy comment the backup logic to WorldCovid, Sender, udemy-courses projects. *
-Add logic to backup name if backup name contained . - Remove the dot (Ignore it). *
-Delete the backup directory with the dot . (Remove all backup from this directory and delete the directory via code). *
-Go on all 'validateEmailAddress.test.js' and 'todo_tasks.txt' + 'complete_tasks.txt' in all backups and clear them. *
-Manually fix: test@test.c. *
-Check why no function id: ajax-loader@2x.gif | ico-email@2x.png | functionIds:. *
-If it works, write a comment on StarterKits to upgrade it also - Canceled. *
-Fix: test@test-ha...ni.il | fix: test@test-ha.ni.il | functionIds: 4 => test@test-ha.muni.il. *
-Invalid fix: test@test-ha...ni.il | fix: test@test-ha.ni.il | functionIds: 4 => test@test-ha.muni.il. *
-Need to unfix this: original: test-test@yahoogroups.com | fix: test-test@yahoo.com | functionIds: 19. *
-Check if need to be fixed: original: test-test@yahoogroups.com | fix: test-test@yahoo.com. *
-Check why not fix as it should be: original: test@eca.gov.il012-3456789 | fix: test@eca.gov.ilm@eca.gov.il0 | functionIds: 27,-15 => test@eca.gov.il. *
-Fix: -test@bmc.gov_.il_ID606767_2_P1010023-110x75.jpg | fix: test@bmc.gov-ilid6067672p1010023-110x75.jpg | functionIds: 3,6,8,11,16 => test@bmc.gov.il *
-Fix test@test.oirg.il => test@test.org.il. *
-Improve logic of commonEmailAddressDomainsList. *
-Check why not converted to .com in the end: isValid: false | original: test@test-is... | *
fix: test@test-is | functionIds: 4,11,-15 (in test@y... it works good). *
-Find manually fix: test@test.c, test@test.c, test@netvision.n, test@test-r.c, test-v@test.o, test@test.g, test@test.c *
test@test.c, test@test.c, test@test.c, test@test.b, test@test.c, test@test-ltd.c, test@test-test.c *
-Should not be fixed: original: test@test.community | fix: test@test.com | functionIds: 28. *
-Should not be fixed: original: test@test.company | fix: test@test.com | functionIds: 28. *
-Refactor time.utils.js. *
-Check how the log file name is created like 'crawl_error_links_20201210_000000.txt' (also the directory name '1_20201210_000000') (no time). *
-Fix: test@test.govil => test@test.gov.il. *
-Need to fix test@test.orgl => test@test.org. *
-Need to be invalid: 67256@agur-logo-ivrit6.1.05.jpg. *
-Invalid fix: original: test@mail....ov.il | fix: test@mail.ov.il | functionIds: 4 => test@mail.co.il. *
-Check why not invalid: original: 67256_@Agur-logo_ivrit_6.1.05.JPG | fix: 67256@agur-logo-ivrit6.1.05.jpg | functionIds: 3,6,11,16,-16. *
-Fix: Need to be valid: test@10.tv | functionIds: -16. *
-Fix: test@savion.huj => test@savion.huji.ac.il. *
-Need to fix - test@asat.technion.ac.ilsyor => test@asat.technion.ac.il. *
-Need to be fixed: test@insurance.il.org => test@insurance.org.il. *
-Add to filter: test@test-test.com. *
-Add to filter: test@knesset.tv. *
-Add to filter: your.name@provider.com, email@email.com, your@friend.email. *
-Fix: test@test.ci.il => test@test.co.il. *
-Fix: test@test.otg.il => test@test.org.il. *
-Fix: test@zahav.nrt.il => test@zahav.net.il. *
-Add to invalid: 14370afcdc17429f9e418d5ffbd0334a@sentry.wixpress.com. *
-Mongodb Service - Check if the service running: *
https://stackoverflow.com/questions/38033127/node-js-how-to-check-a-process-is-running-by-the-process-name *
(Check second answer). *
-Add index.js file to enums and change in all places. *
-Add the exit 'ABORTED_BY_THE_USER' to the Status enum + change it to 'ABORT_BY_THE_USER'. Add all statuses to Status enum. *
-Change the step 'IS_LINKS_STEP' keys to 'IS_LINKS_METHOD_ACTIVE' in all places. Change 'Method' to 'Step' in all places. *
-Remove 'setCrawlStart' function, just assign normally. *
-Copy the 'isPathAccessible' from 'udemy-courses' project. *
-Change the console message of confirmation: 'OK to run? (y = yes)' + refactor function logic (take from 'udemy-courses' project) + *
Update the INSTRUCTIONS.md. *
-Copy all the logic from 'udemy-courses' project of running the project after downloaded from GitHub. *
-Change the counter parameter variable name in the logService in the logProgress to be with the word 'Count' (Example: savedCount). *
-Add logic that if no log flag is true, don't create any directory. *
-Change 'if (linksList && linksList.length > 0) {' to validationUtils + Search more examples of theses to fix. *
-Change the validateInternetConnection like the 'udemy-courses' project. *
-Change all many to single. 'logsUtils' / 'logsService' => 'log' (also in comments of // === and all comments). *
-In package.json change 'main' path to monitor. *
-Sort the services in index.js file again, it's not sorted. *
-Make sure that in log services there is 'this.emptyValue' parameter. *
-Change the project name to 'crawler' (lowercase) instead of 'Crawler' (uppercase). *
-Convert all backups to the new lowercase name. *
-Update packages. *
-Remove all 'SECONDARY_BACKUP_PATH'. *
-Add the logic in puppeteer of closing first empty tab: *
        const page = await browser.newPage(); *
        const pages = await browser.pages(); *
        if (pages.length > 1) { *
            await pages[0].close(); *
        } *
-Add 'DOWNLOADS_PATH' to initiate - validate strings. *
-Fix bug of puppeteer on single round. *
-Check all functions in use. Remove the unused functions. *
-Change all 'saved' to 'save'. *
-Clean all the comments from the project. *
-Convert to TXT files in all places. *
-Check spelling mistakes in all TXT files + MD files + all places. *
-Add LinkedIn, GitHub, StackOverFlow to all README.MD files. *
-Format all documents. *
-Update GitHub project. *
-Clean test Mongo database. *
-Fixed bug with NPM package regex. *
-Need to be fixed right: test@013.net-ytaron. *
-Refactor basic validations. *
-Needs to add logic to detect junk email addresses like this: yyyyyyyy@gggg.ggg.ggg | 222@333.com | s@s.com (this, I think, needs to be invalid). *
-Add logic to fix this: if contains a common domain and more then one @, *
 convert all @ to . except the one of the common domain. *
test@test.007@gmail.com => test.test.007@gmail.com *
-Manually fix: ---@test.some-domain.co.il | fix: @test.some-domain.co.il | functionIds: 11,-10 => test@some-domain.co.il. *
-Gracefully close the program: *
1. When Ctrl+c, detect the exit event and call the close function on crawl.logic.js in order to kill the puppeteer service gracefully. *
2. This will cause the chromium instances to be eliminated without the need to close them manually via task manager. *
-Remove all after '.co.il': test@test-test.co.ilwww.test-test.co.il. *
-Check why invalid: www.test6768@.co.il | functionIds: 5,-8. *
-Add logic to fix this: if starts with flip end domains, flip all the email: *
com.gmail@test.test => test.test@gmail.com *
com.gmail@test.test => test.test@gmail.com *
com.gmail@test.test => test.test@gmail.com *
com.gmail@test.test => test.test@gmail.com *
com.gmail@test78.test => test78.test@gmail.com *
Fix manually: il.org.test@F.B-test => test-b.f@test.org.il. *
-Need to be fixed: test@childrenatrisk.org.i1 => test@childrenatrisk.org.il. *
-Find a way to fix: test@rishonlezion.muni.l03-00000000 | fix: test@rishonlezion.muni.l => test@rishonlezion.muni.il | functionIds: 27,-16. *
-Add 'test@walkout.co' not to be fixed to '.co.il'. *
-Add to invalids list: test.test@template.index, test.test.test-test@template.product, test@template.account.plans. *
-Need to fix: test@test.comhttps, test@test.co.il.html. *
-Need to be fixed right: test@test.org.il-Michrazim. *
Build logic that after .com, .co.il - Remove all the rest (If this logic already exists, fix it). *
(Also check how 03-000000.test.test@gmail.comhttp fixed to 03-000000.test.test@gmail.com - It's valid and good). *
-Make sure both need to be removed if they start with: u003e / u003E / u003. *
(need both logic for u003Etest@natoon-group.co.il (big E in u003E) and for u003etest@crystal-law.co.il (only u003e)). *
(also like this: u003Etest@nadlancenter.co.il). *
-Need to be invalid: Asset-2@4x-1-e1599926525135.d110a0.webp. *
-Convert text@gma.com => text@gmail.com. *
-Need to be invalid: imagesloaded@4.1, flickity@2.0, webflow-util@1.0 =>. *
https://stackoverflow.com/questions/64880479/a-regex-for-npm-or-any-other-package-both-for-name-and-any-version-number. *
-Add to filter domains: court.gov.il. *
-Need to be invalid: 0c99r8uvcpd4ikah5kt16h7igk@group.calendar.google.com. *
-Need to be fixed: test@manpower.co.i.l. *
-Build need logic that if ends with 'muni.l' convert it to 'muni.il'. *
(test@rishonlezion.muni.l03-0000000 => test@rishonlezion.muni.il). *
-Need to be invalid: 2649acf65e0c47afba547cc0ea1f4846@sentry.indeed.com, 251383661830465f98a4aac04e1c2111@sentry.indeed.com, 658ba2886a9642c2b8c035add5a02b63@sentry.indeed.com. *
-Add new script test to validate array of emails.
-Find manually fix for: test@otot-il.o | test@top-hr.o | test@thecloudhr.c | test@mishan.c. *
-Find the fixed domains for this:. *
test@ellers.c, test@thecloudhr.c, test@mutagim.c, test@benhaim.c, test@ellers.c, test.p@wojo.c, test@electra.c, test@inter.n. *
test@emsclub.c. *
-Add to known domain endings: test@manpower.c => test@manpower.co.il. *
-Update packages. *
-Add catch to all return promises. *
-Merge between pause and sleep function if it exists. *
-Change all databaseService to mongoDataBaseService. *
-Refactor all one instance class to module.export = new Class(); *
-Take the 'cutText' function from the Sender project. *
-Change // ===UNCHANGED EMAIL ADDRESS=== // to // ===UNCHANGED SETTINGS=== // in the 'initiate service' to the identical settings. *
-Convert all 'APIKey' to 'apiKey' and 'URLAddress' to 'urlAddress'. *
-Remove BackupType and all logic of it. *
-Remove secondary backup logic. *
-Check which parameters are used in the Mongo database. Not all of them in use. *
-Need to be invalid: info@p6658-119-1339.s119.upress.link - Canceled. *
-Fixed bug with clearInterval. *
-Scan the emails from the night run. *
-Update packages. *
1. Fix the bug that if no browser, restart the application. *
2. Find a way to close all chromium instances by name (terminate process by name). *
3. Terminate all chromium processes by name. *
-Increase the maximum restarts to 50. *
-Fix UnhandledPromiseRejectionWarning with try catch on close function. *
(node:2656) UnhandledPromiseRejectionWarning: Error: Protocol error: Connection closed. Most likely the page has been closed. *
    at Object.exports.assert (C:\Or\Web\Crawler\Crawler\node_modules\puppeteer\lib\cjs\puppeteer\common\assert.js:26:15) *
    at Page.close (C:\Or\Web\Crawler\Crawler\node_modules\puppeteer\lib\cjs\puppeteer\common\Page.js:1198:21) *
    at PuppeteerService.close (C:\Or\Web\Crawler\Crawler\src\services\files\puppeteerService.js:78:29) *
    at CrawlLogic.endProcesses (C:\Or\Web\Crawler\Crawler\src\logics\crawl.logic.js:426:32) *
    at runMicrotasks (<anonymous>) *
    at processTicksAndRejections (internal/process/task_queues.js:93:5) *
    at async CrawlLogic.checkStatus (C:\Or\Web\Crawler\Crawler\src\logics\crawl.logic.js:351:13) *
    at async Timeout._onTimeout (C:\Or\Web\Crawler\Crawler\src\logics\crawl.logic.js:199:13) *
-Add logic of error in a row. If more then 10 (settings.js), restart the application (Update existing error-in-a-row logic). *
-Add flags for single processes with chromium instances. *
-Solve case when browser suddenly closes, unexpected reason. Need to restart the program. *
-Fix the crawl function - Add 'await' to All promises and convert them back to async await. *
 MAKE SURE ALL STILL WORKS. You can refer to the send function in the Sender project. *
-Add the enums logic like in the Sender project - Canceled. *
-Add inner flag IS_TEST_PRODUCTION_MONGO_DATABASE. Relevant only in production mode. If it's true, *
 change the name of the Mongo database to something elses, to enable the crawler to run not on the production Mongo database. *
-Verify it works. *
-Add comment in the crawler project that if you change the 'email_addresses_' file name, change it also in this project. *
-Fix bug with UnhandledPromiseRejectionWarning. *
-Ask in StackOverFlow about the rejection warning: - Canceled. *
(node:12544) UnhandledPromiseRejectionWarning: Error: Protocol error (Runtime.callFunctionOn): Target closed. *
    at C:\Or\Web\Crawler\Crawler\node_modules\puppeteer\lib\cjs\puppeteer\common\Connection.js:208:63 *
    at new Promise (<anonymous>) *
    at CDPSession.send (C:\Or\Web\Crawler\Crawler\node_modules\puppeteer\lib\cjs\puppeteer\common\Connection.js:207:16) *
    at next (C:\Or\Web\Crawler\Crawler\node_modules\puppeteer-extra-plugin-stealth\evasions\sourceurl\index.js:30:43) *
    at CDPSession.send (C:\Or\Web\Crawler\Crawler\node_modules\puppeteer-extra-plugin-stealth\evasions\sourceurl\index.js:54:16) *
    at ExecutionContext._evaluateInternal (C:\Or\Web\Crawler\Crawler\node_modules\puppeteer\lib\cjs\puppeteer\common\ExecutionContext.js:200:50) *
    at ExecutionContext.evaluate (C:\Or\Web\Crawler\Crawler\node_modules\puppeteer\lib\cjs\puppeteer\common\ExecutionContext.js:106:27) *
    at DOMWorld.evaluate (C:\Or\Web\Crawler\Crawler\node_modules\puppeteer\lib\cjs\puppeteer\common\DOMWorld.js:91:24) *
(mention you already have unhandled in other code). *
-Add 'knesset.gov.il' to filter domains. *
-Update packages. *
-Upgrade the skip logic - Take random X of email address, not the first ones. *
-Check why not invalid: 'font-awesome@5.11.2', 'react-dom@16.13.1', 'bootstrap@4.5.2', 'moment-duration-format@2.3.2'. Suppose to be invalid by function: -4 *
-Check why not filtered: 'u002F736e443433c3403396572cc0526bba2d@sentrylabs.indeed.com'. *
-On monitor use file and path utils. *
-Do the 'ToDo' points from the Sender project. *
-Remove unused functions. *
-Limit the user agent by characters count. *
-Remove all comments. *
-Fix all spell mistakes in all TXT files. *
-Fix stuck bug. Put the 'wtfnode' package and figure out what's the problem. *
-Roll back to version of 3/11/2020 and make sure not stuck.*
-Fix UnhandledPromiseRejectionWarning once and for all - Canceled. Fix this may cause the node to get stuck. - Fixed. *
-Add catch all return promises. *
-Added 'stop' on package.json. *
-ReImplement all the logic of: Fix in validations, * Skip, * Restarts count, * Schedule, * and test again for 1 hour watch. *
-Remove all comments. *
-Add search files to compare logics and implement the rest of the logic. *
-Test again for 1 hour watch. *
-Roll back again and found out that the while loop hangs the node process. *
-Replace all the while loops in the application with a for loop. *
-Clear all console.error from the application. *
-Check 'u002F736e443433c3403396572cc0526bba2d@sentrylabs.indeed.com' again. *
-Add 'c40e683360e443f79871f173e06164b5@app.getsentry.com' to invalid domains. *
-Add 'http://www.wapforum.org/DTD/xhtml-mobile10.dtd' to filter domains. *
-Clear all comments and reformat all documents. *
-Add '736e443433c3403396572cc0526bba2d@sentrylabs.indeed.com' to invalid domains. *
-Add log files interval to settings.js *
-Add flag to debug log mode (implement wtfnode). *
-Remove timeout after the crawler is stuck. *
-Add schedule settings - Start the crawl process in X minutes (If 0 - No schedule). *
-The schedule logic will take place in the monitor. *
-The schedule will displayed in a down clock counter: ===Starts in 00:34:23 [-]=== *
-Watch 1 hour of crawl process. *
 (isLongRun ? 120 minutes : 0 - If 0 - No schedule) - Canceled. *
-Change the format of the folder name and txt files to be ddMMyyyy. *
-Remove all comments around the project (make a folder in misc called backup and put there all comments). *
-Format all files. *
-Add missing dots in the end for comments. *
-Add for Google and Bing a list of query string domains, and add base domain, and randomly creates a new url each request process. *
 Build it as an array so that other search engines will take the single if not more than one. *
-Update packages. *
-Add 'u002F' to remove it from the start. *
-Add timeout options to wait for function + await page.setDefaultTimeout(45000); *
-Add check on error parameters. *
-Add line space + '======' + line space between errors on error log. *
-Change reject to resolve. *
-Make this invalid: a7c692d0c1ed48af83840708a08e5005@o296891.ingest.sentry.io *
-Make this valid: test-test@test.gov.il011-1111111 (if it ends with numbers, remove all numbers). *
 Logic: if not end with a letter, remove the last character until it will be a letter). *
 Put this new logic to be in the end. *
-Remove the 'Step-Send' step, it will be a different project (and from any document file in the project). *
-Add max retries to settings. *
-Add 'skip' logic as a flag to settings. *
-Remove the messages: *
'Forever detected script exited with code 1 *
Forever restarting script for 2 time' *
-Instead add parameters to general with new column: Restarts: 1 *
(Take from NodeRestart project the code for passing parameters to process child). *
-Add random to wait for html or wait for function, each request - Canceled. Keep the wait for html in comments. *
-Fix bug of UnhandledPromiseRejectionWarning: Error: Protocol error (Runtime.callFunctionOn): Target closed: *
(node:14700) UnhandledPromiseRejectionWarning: Error: Protocol error (Runtime.callFunctionOn): Target closed. *
    at C:\Or\Web\Crawler\Crawler\node_modules\puppeteer\lib\cjs\puppeteer\common\Connection.js:208:63 *
    at new Promise (<anonymous>) *
    at CDPSession.send (C:\Or\Web\Crawler\Crawler\node_modules\puppeteer\lib\cjs\puppeteer\common\Connection.js:207:16) *
    at next (C:\Or\Web\Crawler\Crawler\node_modules\puppeteer-extra-plugin-stealth\evasions\sourceurl\index.js:30:43) *
    at CDPSession.send (C:\Or\Web\Crawler\Crawler\node_modules\puppeteer-extra-plugin-stealth\evasions\sourceurl\index.js:54:16) *
    at ExecutionContext._evaluateInternal (C:\Or\Web\Crawler\Crawler\node_modules\puppeteer\lib\cjs\puppeteer\common\ExecutionContext.js:200:50) *
    at ExecutionContext.evaluate (C:\Or\Web\Crawler\Crawler\node_modules\puppeteer\lib\cjs\puppeteer\common\ExecutionContext.js:106:27) *
    at DOMWorld.evaluate (C:\Or\Web\Crawler\Crawler\node_modules\puppeteer\lib\cjs\puppeteer\common\DOMWorld.js:91:24) *
    at runNextTicks (internal/process/task_queues.js:62:5) *
    at listOnTimeout (internal/timers.js:523:9) *
    at processTimers (internal/timers.js:497:7) *
(node:14700) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). To terminate the node process on unhandled promise rejection, use the CLI flag `--unhandled-rejections=strict` (see https://nodejs.org/api/cli.html#cli_unhandled_rejections_mode). (rejection id: 3) *
-Check validation for this: 'mayo pikuach1@k-8.co.il' *
-Add debug mode - inner parameter - the monitor will exit after 1 minute - Canceled. *
-Add cleanup when exit. *
-Add errors log. *
-Add stacktrace log. *
-Add stop command to package.json. *
-Restore the logic and try to close the page instead of initiate all. *
-Clear all timeouts all places on exit. *
-Merge wait/pause functions. *
-Add forever-monitor with a hard restart of the application (pass parameter of restart to avoid confirmation) (timeout from the settings). *
-Check that the monitor works. *
-Fix forever-monitor clash withlog-update package. *
-Check session test still works. *
-Watch a live session of 1 hour to make sure everything is working. *
-Update packages and make sure all works well. *
-Fix stuck bug back again - Consider restart browser. *
-Fix the bug on 'skip' is NaN. *
-Do all the ToDo points. *
-Fix all bugs of the compiler * (Add Eslint settings from WorldCovid project *, and use WorldCovid project from backup script with new syntax). *
-Change all places needed from let to const. *
-Remove unused async/await. *
-Move on all files, check if there is an inner call, use 'this' key and not the class name. *
-Add justice.gov.il and police.gov.il and taxes.gov.il. *
-Add logic to remove 'u003, u00a0' on the start of the email address. *
-If from a URL there is the same email domain part over 5 (from settings.js) times, *
 take only the first one and ignore the rest (don't insert them to the database) - Add skipped column for that. *
 Important: Exclude popular domains, like gmail, outlook, hotmail, etc... *
-In the console status, add the line of 'Saved Statistics', and add the counter of email addresses saved for each search engine. *
-Add path to remove all files after each process (in my case, downloads folder) (and at the end of all processes). *
-Fix bug on the domains counter log. *
-Update all the packages to the latest version and check that everything works well. *
-Fix bugs session: *
-Update all the packages to the latest version and check that everything works good. *
-Add new line under page - [USER AGENT] with the user agent of the current search. *
-Add new test - called session.test.js, will contain a list URL/user-agent and test a session in the console. *
-If the user agent is empty on the session item - Random one. *
-Fix bug of dismiss dialog box - Stuck. *
-Fix bug of 'http://googleweblight.com/fp%3Fu%3D' in the start of the URL. *
-Fix bug of duplicates status rows. *
-The next time you run the crawler, write here all the tasks needed to improve. *
-Format object syntax to multiline. *
-Add the settings - Method: 'Normal/SessionTest' | IsLongRun: true/false (Add both to confirmation). *
-Implement the logic of night run logic, different goal parameters. *
-Find more elegant way to declare the night run, why outside of settings? (Add it to confirmation). *
-In the search key - If implement static key, prefer it on basic / advanced search logic. Today it works only if basic. *
-For each search process, make an URL array, to avoid search in duplicate URLS - Canceled. *
-Fix bugs with alert notifications. *
-Fix bug stuck on a search process. *
-Fix bug is stuck on URL. *
-Solve again issues with recaptcha with extra plugins. *
-Solve recaptcha by random user agent. *
-Fix bug of replacing date at midnight. *
-Take the crawler and copy to the new directory as 'TextFileConvert'. *
-First script: Build a script that reads all files: txt, bak, xlsx, csv, and others, and converts all the files to TXT. *
-Change the name of the 'TextFileConvert' to 'TempCrawlerLogics'. *
-Inside of this directory, will be the sources and the backups. *
-After finish the first script, do a backup with a specific name (without the sources). *
-Move the finished directory from the project, to sources directory, along with the temp_sources. *
-Second script: Build a script that reads all the data from the TXT files and do the following for each email address: *
1. Check if the email address is already found in the database. *
2. If not found - Do validation on the email address. *
3. Add the domain part of the email address to a new table, domains (will be name and count) - If not exists add, if exists add to count. *
-Run the script. *
-While the script is running, take back from the sources the implement to fix documents. *
-Merge all domains into one TXT file and delete the rest. *
-After the script finishes, save the results in the end in another place. *
-Once the script ends, Do a backup. *
-Delete all places that can drop the table. *
-Build a script that scans all the email addresses - Validates all the email addresses. Only log of fix and invalid. *
-Since over 20M rows, log only important fixes and invalid. Check the function ids. *
-Run the script. *
-After the script finishes, save the results in the end in another place. *
-Do a backup. *
-Change the database name + insert a few dummy data. *
-Third script: Build a script that runs on the domain merged document and add it to the existing table. *
-Test with dummy data on the other database. *
-Change the database to destination and run the script. *
-Once the script ends, Do a backup. *
-Four script: Build a script that log the domain counts by 2 TXT files: *
A. Domain counter by the most count. *
B. All existing domains by order name ascending. *
-Run the script. *
-After the script finishes, save the results in the end in another place (same place of the first results). *
-Do a backup. *
-Build new script that pulls all the domains from the database, for each domain attach 'test', and validates it - Canceled. *
-Save the results for somewhere else - Canceled. *
-Save all the new data (saved in another place) in the sources directory - Canceled. *
-Do a backup - Canceled. *
-After 2 scripts done, go back to the original Crawler (this project). *
-Merge the logics with the crawler projects. *
-Delete all the old sources. *
-Bring back the logic of the crawler before starting the loading of all the data. *
-Go over all the bugs and list them in this document - Move them into one document. *
-Merge all the bugs need to be fixed - into one document. *
-Before any change made - Check for duplicates in the new document - Canceled. *
-For that, create again the 'CrawlerLogic', and build a script that finds domains  - Canceled. *
(from email addresses or not) in the source document and count the duplicate domains and check why they are duplicated - Canceled. *
-Remove the duplicate domains from the sources document - Canceled. *
-Scan all the invalid email addresses / fixes and list them in the new document. *
-Scan the domains alfabetic log, get the popular domain mistakes. *
-After finishing to fix all - Build a script to validate all email addresses from original validation email addresses - Canceled. *
 Compare between the old fixed and the new ones - Make sure all are fixed and correct - Canceled. *
-Do a backup of the sources_tasks.txt. *
-To get the real domain counts - Most popular domains, need to scan all the files and count the domains. *
 1. For that, it needs to scan all of the sources again (found in backup in iOmega sources) - Scan all files to 1 file of total domain counts. *
 2. For the sources of pflogsummarymailrelay.txt - Find a way to add them. *
-Most common domains: C:\Or\Web\Crawler\Sources\FixesToImplement\pflogsummarymailrelay.txt + pflogsummarymailrelay2.txt (Implement in common domains?). *
-Identical endings (need to think what to do about what to do with it - maybe for each one of them - it's one typos). *
-Take all the typos of the popular domains - Merge them in the source document by typos / global fix / singles (not need fix / co.il / com). *
-Do a backup of the crawler before any change. *
-Check in the alphabetic domains count - Check all types of popular domains. *
-Check in the domains list - Check all with the numbers of 0. *
-Add this to 'commonEmailAddressDomainsList.configuration' before each relevant domain - Canceled. *
-Check for duplicates in all places! *
-Test some of the typos. *
-Check that everything works ok (development) and check test cases results + typos of all popular domains. *
-Move all the tasks completed to complete the document. *
-Implement all typos of the most popular domains and singles. *
-Make sure for each popular domain there are no duplicates. *
-Test some of the typos. *
-Check that everything works ok (development / production) and check test cases results + typos of all popular domains. *
-Test some of the filters. *
-Check that everything works ok (development) and check test cases results + typos of all popular domains. *
-Move all the tasks completed to complete the document. *
-Do backup before changing any .com /.co.il *
-Add all of these to singles.
-ToDo: After finishing all the singles - Check for duplicates and remove them. *
-Do backup before unfixed. *
-ToDo: Make sure that the 'unfixEmailAddressDomains' list is only in case of domain end change, not in any other fix. *
-Implement 1-2 and test them. If OK, implement all. *
-Implement all unfixed. *
-Test some of them. *
-Check that everything works ok (development) and check test cases results + typos of all popular domains. *
-Move all the tasks completed to complete the document. *
-Test some of the unfixed. *
-Check that everything works ok (development) and check test cases results + typos of all popular domains. *
-Move all the tasks completed to complete the document. *
-Check all working before going to GLOBAL tasks and co.il / com tasks. *
-Make sure for each popular domain there are no duplicates. *
-Update the backup script: *
1. Add option to write a comment. *
2. Remove specific files from specific directories. *
-BEFORE start with global functions, DO BACKUP! *
-Add new enum to cases: 'updates'. *
-Add case for it. *
-Pull a new list. *
-The updates list will always serve for changes and updates. *
-Change the emailAddressSandBox.test.js to validateEmailAddress.test.js (also change it on package.json). *
-Change the freeStyle.test.js to sandBox.test.js (also change it on package.json). *
-Add logic: *
-1. Change 'emailAddressDomainDetailsList' to 'commonEmailAddressDomainsList'. *
-2. Search in the domain part for any sign of a popular domain (gmail, yahoo, walla, etc). *
-3. If it contains the word, it will be automatically assigned to be the popular domain. *
-4. Make sure it will be the last fix before validation. *
-5. Need to test any cases like: *
-gmail.com2gmail.com  | 5 *
-gmail.com 5326535- | 4 *
-gmail.coma-   | 206 *
-gmail.coma7175213gmail.com | 1 *
-dlfksjkdgmail.comasjhdk *
-wejklwewalla.co.ilwekhfjwk *
-original: test2@gmail.comtest2 | fix: test2@undefined.comtest2 | functionIds: 12,-10 (all the rest after gmail.com should be removed). *
-original: test@gmail.comtest | fix: test@undefined.comtest | functionIds: 12 (all the rest after gmail.com should be removed). *
-test@1973.gmail.coml | fix: test@1973.gmail.com | functionIds: 12 => when have addition in the domain part and it's popular domain, take the addition and move it to the local part. *
-original: test43@gmail.comw_test-69hotmail.com | fix: test43@gmail.comwtest-69hotmail.com | functionIds: 3 => gmail.com (first popular domain wins). *
-original: mail.huji.ac.iltest.test@gmail.comaharonbaime | fix: mail.huji.ac.iltest.test@undefined.comaharonbaime | functionIds: 12 (first popular domain wins). *
-original: gmail.comtest@gmail.comb7baime | fix: gmail.comtest@undefined.comb7baime | functionIds: 12,-11 => (first popular domain wins). *
-original: sh.test@gmail.comdavid.baime | fix: sh.test@gmail.comtest.i | functionIds: 12,-11 => (first popular domain wins). *
-original: test@yahoo.comsam_yutcis.com | fix: test@yahoo.comtest.com | functionIds: 3 (if after yahoo.com - no dot, remove the rest). *
-Add logic: *
1. Make a list of popular domain ends (.com, .co.il, .org.il, .net, .net.il, etc... - Scan the domains list for all common domain ends). *
2. Search for the domain end. *
3. After detection of the domain end - Remove anything else after the domain end. *
-original: test@test.comtzlil | fix: igale@undefined.comtzlil | functionIds: 12 => (check this). *
-original: test@te.compol.comb | fix: alintco@test.compol.com | functionIds: 12 => (after .com remove the rest). *
-test.comtestesfdfljs@asdasmomab.comilan => all after .com (and not yahoo) need to be removed. *
-original: skjdf.comddsfjk@test.muni.iltranslation | fix: dklsjflsdflks | functionIds: 12,-10 => (if contains .muni.il => remove the rest). *
-original: test_te@dklsjfl.comhahin_s | fix: test_te@dklsjfsdfsfs | functionIds: 3  => (if not specific domains like yahoo.com.uk - remove rest after .com). *
-original: test@testest.compmilan | fix: ameneghetti@undefined.comdsfs | functionIds: 12 => (if not specific domains like yahoo.com.uk - remove rest after .com). *
-original: test@test.comshai | fix: shai@undefined.comshai | functionIds: 12 => (check why undefined). *
-original: test@test-test.comshai | fix: shai@undefined.comshai | functionIds: 12 =>  (check why undefined). *
-original: test@gmail.com.lior | fix: test@gmail.com.o | functionIds: 12,-11 => (after gmail.com remove the rest). *
-original: test@nana10.co.il.hili | fix: test@nana10.co.il.l | functionIds: 12,-11 => .co.il (all the rest after co.il should be removed). *
-original: test@te_test.como | fix: test@test.como | functionIds: 3 => (if not specific domains like yahoo.com.uk - remove rest after .com). *
-original: test@test.co.ilola.gru | fix: test@test.co.ilola.u | functionIds: 12,-11 => (remove all after .co.il). *
-Fix logic of typos between walla.co.il and walla.com. *
-Add logic: *
-Add field of domain name, another field of Micromatch without the * sign. By the new field name, loop on start and add * to a new field - Canceled. *
-Change the logic that if it only contains the name of a popular domain, it will automatically be replaced by the domain. *
-Change the common domain structure: domain, domainName (without end), micromatchName. Do the changes accordingly in the code. *
-Remove the 'initiateEmailAddressDomainDetails', the Micromatch will be determined manually. *
-When loop, first compare the full domain name with end, then compare only the name without end. *
-original: test@test.gmail | fix: test@undefined.gmail | functionIds: 12 => (if the domain name contains gmail (even if without.com) and has an addition before - move the addition to the local part and it will be gmail.com). *
-original: test@test23d.gmail | fix: test@undefined.gmail | functionIds: 12 => (if the domain name contains gmail (even if without.com) and has an addition before - move the addition to the local part and it will be gmail.com). *
-original: test@test-law.gmail | fix: test@undefined.gmail | functionIds: 12 => (if the domain name contains gmail (even if without.com) and has an addition before - move the addition to the local part and it will be gmail.com). *
-Time: 12:32:31 | isValid: false | original: test@walla.ciom | fix: test@walla.io | functionIds: 14 *
-original: test@test_walla.co.il | fix: test@testwalla.co.il | functionIds: 3 *
-Add logic: all test.com.com | test.com (.co.il.co.il, .com.com.com.com, .org.il, => need to remove duplicates). *
-original: test@test...test.com | fix: test@test..test.com | functionIds: 4,-10 => shrink to 1 dot, no matter how many dots have. *
-test@test...com | fix: test@test..com | functionIds: 4,-10 => ...com => .com. *
-Add logic: Remove the logic of invalid email addresses from specific words like 'mailto'. *
-Add logic: *
-The list 'emailAddressEndFixTypos' repeats the replace all the time. *
-Need to convert to class with name and list of typos, like common email addresses domains. *
1. Rename the file 'commonEmailAddressDomainTyposList.configuration' to 'emailAddressDomainsList.configuration'. Change in all places. *
2. Inside the file, change the array from 'commonEmailAddressDomainTyposList' to 'emailAddressDomainsList'. Change this in all places. *
3. Change the class name from 'CommonEmailAddressDomainTypos' to 'EmailAddressDomain'. Change in all places. *
4. Inside the 'EmailAddressDomainModel' class, change the 'list' field to 'typosList'. Change in all places. *
-Now it's time to build the new class for the domainEnd: *
1. Build class EmailAddressDomainEnd: domainEnd, domainEndGroupName, isSingleWord, typosList. *
2. Create a new file called 'emailAddressDomainEndsList.configuration'. *
3. Inside the file create a new array called 'emailAddressDomainEndsList'. *
4. Fill the file with all the domain ends according to the existing lists and the typos. *
5. Generate all the lists that exist today. Test them to see if they are correct in the sandbox.test file. *
6. Replace 'emailAddressConfigurations.configuration.js' file with 'emailAddressDomainEndsList.configuration' in all places. *
8. Verify it all works. *
9. After all works, remove the all lists from 'emailAddressConfigurations.configuration.js' (except from the first one). *
-Rename all 'commonEmailAddressDomainTyposList' to commonEmailAddressDomainsList - Canceled. *
-Rename all 'CommonEmailAddressDomainTypos' to 'CommonEmailAddressDomain' - Canceled. *
-Build class CommonEmailAddressDomainEnd: domainEnd, isSingleWord, domainEndGroupName, list - Canceled. *
-Fill all the domains in a new file called 'commonEmailAddressDomainEndsList.configuration' - Canceled. *
-Move all the lists - Canceled. *
-Generate the lists according to the logic today, from one list - 'commonEmailAddressDomainEndsList' - Canceled. *
7. Need to change the logic with 'emailAddressEndFixTypos' to fit the new list - Canceled. *
-original: test_b@live.vom | fix: test_b@livecom.com | functionIds: 11,13 => live.com *
-original: test@testl.vom | fix: test@testlcom.com | functionIds: 11,13 => avivil.com *
-original: testa@test-law.co.cil | fix: test@test-law.co.l | functionIds: 12,-11 => .co.cil => .co.il *
-Add logic: .co.ol => .co.il *
-Add logic to convert ending: .com.il  => .co.il *
-original: test.a@test.comil | fix: test.a@undefined.comil | functionIds: 12 => .co.il *
-test@test.c.ill | fix: test@test.c.il | functionIds: 12 => .co.il *
-original: test@test.co.lil | fix: test@test.co.l | functionIds: 12,-11 => .co.il *
-original: test@test.co.olil | fix: test@test.co. | functionIds: 12,-11 => .co.il *
-original: test@test.co.kil | fix: test@test.co.l | functionIds: 12,-11 => .co.il *
-original: test@test-ur.co.uil | fix: test@test-ur.co.l | functionIds: 12,-11 => .co.il *
-original: test@test.co.iil | fix: test@test.co.l | functionIds: 12,-11 => .co.il *
-original: or@netbiz.co.uil | fix: or@netbiz.co.l | functionIds: 12,-11 => .co.il *
-original: test@test-test.c.oil | fix: test@test-test.c.l | functionIds: 12,-11 => .co.il *
-original: test@test.co.iol | fix: test@test.co.io | functionIds: 12 => .co.il *
-original: test@test.co.ail | fix: test@test.ai | functionIds: 12 => .co.il *
-original: test.test@test.co.dil | fix: test.test@test.co.l | functionIds: 12,-11 => .co.il *
-original: testa@a.gmail.coma | fix: testa@a.gmail.com | functionIds: 12 => if it contains a popular domain, it should be replaced to be the popular domain. *
-original: test@test.or.gil | fix: test@test.or.l | functionIds: 12,-11 => .org.il *
-original: test@test.org.oil | fix: test@test.org.l | functionIds: 12,-11 => .org.il *
-original: test@test.org.oil | fix: test@test.org.l | functionIds: 12,-11 => .org.il *
-Add logic: test.org.oil => .org.il *
-original: test@test.org.iol | fix: test@test.org.io | functionIds: 12 => .org.il *
-original: test@test.go.vil | fix: test@test.go.l | functionIds: 12,-11 => .gov.il *
-original: test@test.go.vil | fix: test@test.go.l | functionIds: 12,-11 => mot.gov.il *
-original: test@test.muni.iol | fix: test@test.muni.io | functionIds: 12 => .muni.il *
-original: test-4@test.net.iil | fix: test-4@test.net.l | functionIds: 12,-11 => .net.il *
-Test: test@nrl.navy.mil *
-Test: test@navsta.rota.navy.mil *
-Test: test@hill.af.mil *
-Test: test@mnd-b.army.mil *
-Test: test@med.navy.mil *
-Test: test@g-a-t.mail *
-Test: test@ffg56.navy.mil *
-Test: test@ffg.55.navy.mil *
-Test: test@fe.navy.mil *
-Test: test@eu.navy.mil *
-Test: test@eur.army.mil *
-Test: test@conus.army.mil *
-Test: test@arnold.af.mil *
-Test: test@us.af.mil *
-Test: test@us.army.mil *
-Test: test@usace.army.mil *
-Test: test@usace.arny.mil *
-Test: test@usu.army.mil *
-Test: test@tq.mnf-iraq.usmc.mil *
-Add logic: .mil => .l - Canceled. *
-Add logic: .vom => .com *
-Fix: test@test.comtzlil *
-Fix: test.a@test.email *
-Fix: test.a@jumboemail.me@#$@#dfs *
-Fix: test@narnir.mail *
-Fix: test@g-a-t.mail *
-Fix: test@betaeng.mail *
-Fix: test@orange.mail *
-Fix: test@tiscali.mail *
-Fix: test@Time: 17:43:36 | isValid: true | original: test@g-a-t.mail | fix: test@undefined.ai | functionIds: 12,13 => need to stay original. *
-original: test@te.mail | fix: test@undefined.mail | functionIds: 12 => fix it. *
-original: test.a@test.email | fix: test.a@undefined.email | functionIds: 12 => all .email - ignore (if not popular domain). *
-Fix: test@.jambo.mail *
-original: g.test@libero.mail | fix: g.test@undefined.mail | functionIds: 12 => libero.mail.it *
-original: test@.jambo.mail | fix: test@undefined.mail | functionIds: 7,12 => (check if @. => @ works). *
-Fix all new invalid singles common domains - Mistake replaced between the domain and the typo. *
-Fix: test@mail.rustudiofx *
-Add logic: - Canceled. *
-When unfix, I need to mark it in a new functionId - Canceled. *
-Add logic: i.ua is a valid domain. Make a list of valid domains, and unfix it. *
-Fix: test@sce.ac.i *
-Fix: test@sce.ac.i *
-Fix: test@wisemail.weizmann.ac.i *
-Fix: test@post.tau.ac.i *
-Fix: test@macam.ac.i *
-Fix: test@bgu.ac.i *
-Fix: test700@gmail.c *
-Fix: test@post.tau.ac.l *
-original: test.test@mail.huji.acil | fix: test.test@mail.huji. | functionIds: 12,-11 => mail.huji.ac.il *
-original: test1@univ.haifa.acil | fix: test1@univ.haifa. | functionIds: 12,-11 => .ac.il *
-original: test@camous.technion.acil | fix: test@camous.technion. | functionIds: 12,-11 => .ac.il *
-original: test@ekmd.huji.a.cil | fix: test@ekmd.huji.a.l | functionIds: 12,-11 => ekmd.huji.ac.il *
-original: test.test@msil.huji.acil | fix: test.test@msil.huji. | functionIds: 12,-11 => .huji.ac.il *
-original: test@test.huji.ac.iol | fix: test@test.huji.ac.io | functionIds: 12 => .ac.il *
-original: test@post.bgu.acil | fix: test@post.bgu. | functionIds: 12,-11 => .bgu.ac.il *
-Need to add to common domains fix: huji.ac.il, all hugi.ax.cil and all of it's kinds, need to be replaced. *
-original: test@test.ac.ail | fix: test@test.ai | functionIds: 12 => .ac.il *
-original: test.test@mail.huji.agil | fix: test.test@mail.huji. | functionIds: 12,-11 => mail.huji.ac.il *
-Need fix: mail.hugi.ac.il | mail.huj.ac.il => mail.huji.ac.il *
-original: test@agri.huji.a. | fix: test@agri.huji.a | functionIds: 7,-11 => .huji.ac.il *
-original: test@mail.tau.ail | fix: test@mail.ai | functionIds: 12 => .tau.ac.il *
-original: test.test@mail.huji. | fix: test.test@mail.huji | functionIds: 7 => .ac.il *
-original: test1@univ.haifa. | fix: test1@univ.ai | functionIds: 7,14 => .ac.il *
-original: test.test@msil.huji. | fix: test.test@msil.huji | functionIds: 1,7,11 => .ac.il *
-original: test@post.bgu. | fix: test@post.bgu | functionIds: 7 => .ac.il *
-original: test.test@mail.huji. | fix: test.test@mail.huji | functionIds: 7 => .ac.il *
-Fix: test@013.n *
-Fix: test@012.net.l *
-Fix: test@walla.co0
-Fix: -original: 'test.s@shapira.ort.org.oil', fix: 'test.s@shapira.org', isValid: true, functionIds: [ 13 ] => .org.il *
-original: test.test@moh.health.gov.iol | fix: test.test@moh.health.gov.io | functionIds: 12 => .gov.il => gov.il *
-original: test.ab@ok.mail | fix: test.ab@undefined.mail | functionIds: 12 => okmail.co.il *
-original: -test@kfahoum.co.il | fix: test@kfahoum.com | functionIds: 7,18 => (check why changed to .com from .co.il). *
-Fix: test@test-.co.il *
-Fix: test@test-y-r-.co.il *
-Fix: test@test-.test.com *
-Fix: test@test-s-.com *
-Fix: test@test.-eng.co.il *
-Fix: test@internet.-zahav.net *
-Fix: test@test.-eng.co.il *
-Fix: test@test-.pro.com *
-Fix: test@test-test-.co.il *
-Fix: test@test-.net *
-Fix: test@t-t-t-.co.il *
-Fix: test@t-t-t-.com *
-Fix: test@test-.co.il *
-Fix: test@t-.co.il *
-Fix: test@test-.co.il *
-Fix: test@3.-test.co.il *
-Fix: test_t@mail.tel-.aviv.gov.il *
-Fix: test.test@test.-tv.com *
-Fix: test@test-t-t-.co.il *
-Fix: test@test-.t.com *
-Fix: test@test-.eng.co.il *
-Fix: test@test-.net *
-Fix: test_a@test-.org.il *
-Fix: test@t-.t.co.il *
-Fix: test@t-.co.il *
-Fix: test@test-.co.il *
-Fix: test@t-t-.com *
-Fix: test@test-.com *
-Fix: test@test-.co.il *
-Fix: test.test@s-.org.il *
-Fix: test@test-.co.il *
-Fix: test_t@test-.co.il *
-Fix: test@t-.co.il *
-Fix: test@t-t-.org.il *
-Fix: test_t@test-.co.il *
-Fix: test@t-.co.il *
-Fix: test.test@test-test-.co.il *
-Fix: test@t-t-.com *
-Fix: test@test-test-.co.il *
-Fix: test@test-.co.il *
-Fix: test@t-t-.co.il *
-Fix: test@t-t-.co.il *
-Fix: test@test_test_.co.il *
-Fix: test@_test_test.co.il *
-Fix: test@test_co.il *
-Fix: test@test_gov.il *
-Fix: test@test_test.com *
-Fix: test@.gail.com *
-Fix: test@test-.pro.com *
-Fix: test2@test_test.co.il *
-Fix: test@-gmail.com *
-Fix: test@gmail-.com *
-Fix: test@-gmail-.com
-Add edge cases logic: *
-THIS IS BEFORE REMOVE SPECIAL CHARACTERS. *
-Comment the function of 'fixDomainReplaceCommonMistakes'. *
-Comment all references all over the application of 'emailAddressReplaceTypos'. *
-Remove the file of 'emailAddressConfigurations.configuration.js' from all applications - Canceled. *
-Group all edge cases that require surgical logic to a new function. *
-Group of replace, Group of special logic, etc... *
-Implement all in the 'Here' section. Call the new function 'fixEdgeCases'. *
-In the generator test script, in the section of 'mayMisspellEmailAddress', *
 implement all of the above in random email addresses. *
 (in emailAddressConfigurations.configuration - Make a list there of all the above). *
-Groups: (Do the logic in the following order - A MUST) - *
#. Replace with @: - *
@. - *
@_ - *
//@@@@----DOMAIN PART ONLY----@@@@// - *
-Replace all '_' with '-'. in the domain part only. - *
.- - *
#. If the second word is not a domain end, replace with '-'. - *
#. If the second word is a domain end, Remove the '-'. - *
-. - *
#. Replace '-.' => If the second word is not a domain end, replace with '-'. - *
#. Replace '-.' => If the second word is a domain end, Remove the '-'. - *
-co.il - *
If the domain ends separated by -, replace it with . - *
-the replace of the '_' with '-' need to be first logic, since need to remove '-.' *
-(if after the @ there is '-' or '_', remove it (only the first one)). *
-.co.il (check if the end is seperated by _). *
-.gov.il (check if the end is seperated by _). *
-all places where '_' in domain part - replace with '-'. *
-It's OK, but move the logic into a higher scope of functions: EdgeCaseFix. Inside these functions insert all the edge cases. *
-Add logic: *
-1. In the domain part, if it contains '_' in the middle - Convert it to '-'. *
-2. All the rest of the special characters - Remove. *
 (test2@test_test.co.il => test2@test-test.co.il). *
-3. Check also: test@-gmail.com | test@gmail-.com | test@-gmail-.com *
-Fix: original: t.test@libero.mail | fix: t.test@undefined.mail | functionIds: 12 => libero.mail.it *
-Fix: test@4test.co.il7840_test_test_test_86033401-016_test4.pdf *
-Fix: test1.test@t.test.te.test *
-Fix: test@gilad-shiff.c => .com *
-Fix: test@1.tv => 10.tv *
-Fix: test@1.tv => 10.tv *
-Add Logic: *
-Fix: --------------------------------------------------------------------------------test220220@gmail.com *
-Move all the length validations to the end, just before the email address validations. *
-Then test: *
-Fix: -783.jpg1005.3mb-788.jpg1005.7mb-799.jpg1002.5mb-801.jpg1007mb-792.jpg1005.8mb-808.jpg1006.3mb-811.jpg1002.8mb-812.jpg1004.1mb-825.jpg1005.3mb-835.jpg1005.8mb-860.jpg1002.7mb-938.jpg1006.5mb-962.jpg1006.9mb-970.jpg1006.1mb-1169.jpg1006.7mb-1171.jpg1006.6mb-1182.jpg1004.6mb-1189.jpg1006.9mb-1211.jpg1006.2mb-1212.jpg1006.3mb-1229.jpg1007.4mb-1238.jpg1007.3mb-1242.jpg1007.3mb-1246.jpg1002.2mb-1247.jpg1006.3mb-1249.jpg1005.9mb-1250.jpg1006.2mb-1251.jpg1006.1mb-1254.jpg1006.4mb-1255.jpg1006.1mb-1263.jpg1006.6mb-1278.jpg1004.2mb-1310.jpg1006.1mb-1312.jpg1003.1mb-1313.jpg1002.2mb-1314.jpg10023.2mb-1315.jpg10023.5mb-1316.jpg10020.4mb-1317.jpg10019.2mb-3.jpg10013.8mb-5.jpg1004.1mb-8.jpg10019.4mb-16.jpg1003.1mb-20.jpg10017.1mb-80.jpg7213.5mb-23.jpg03.9mb-54.jpg03.6mb-75.jpg013.4mb-132.jpg04.8mb-422.jpgtest@013net.net *
-Fix: tttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttt2015tttttttttttttttttttttttttttttttttttttttttttttttttttttttttt________________________________________19ttttttttt2015ttttttttttttttttttttttttttttttttttttttttttttttttttt________________________________________20tttttttttttttttttttttttttttttttttttttttttttttttttttttttttest@test-test.de *
-Fix: tttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttt-2016.tttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttt.testtt-2016ttttttttttt20tttttttttttttttttttttttttt2tttttttttttttttttttttttt1ttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttt.ttttttttttttttttttttttt140tttttttttttttttttttttttttttttttttttttt.tttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttt.tttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttt.ttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttt.tttttttttttttttttttttttttttttttttttttttttttttttttttttt.tttttttttttttttt.tttttttttttttt@test.sn *
-Fix: 36-16-23.39-16912.12-25.36-16-23.39-16912.12-25.36-16-23.39-16912.12-25.ramishani@gmail.com *
-Fix: tttttttttttttttttt8.0tttttttttttttttttttttttttt24ttttttttttt960tttttttttttt373tttttttttttttttttttttt1ttttttttttttttttttttt1ttttttttttttttttttttttttttttttttttttttttttt07373101.38947636386.3014test@testtesttest.com *
-Fix: tesett-ttttttttttttttttttttttttttttttttttttttttttttttttttttttttttt@gmail.com *
-Fix: tttttttttttttttttttttttt200ttttttttt.tttttttt.tttttttt.ttttt175tttttttttttttttttttttt.ttttttttttttttttttttttttttttttttttttt@testtest.com *
-Fix: tttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttt1@hotmail.com *
-Fix: 0467942520467942770505662481www.ttttttttttt.co.il0467942520467942770505662481www.testtesttest.co.ilte_test@netvision.net.il *
-Fix: googlereplytocin6mti1ew5nawv1yjvpcdv0zjiya3pqyzr1bmzqc2phegiwnbdejrsa_a8qi3oxmzjncmy0cnvym2qzdde1mjjrempjnhvuzmpzamf4yja0ai3v7_uaaaaau3yk8ikg6l1uyykgkqt1xrnv9test@plus.google.com *
-Fix: test0031-03test0031-90test0032-01test0033-02test0035-01test0037-02test0038-01test@netvision.net.il *
-Fix: tttttttttttttttttttttttt-ttttttttttttttttttttttttttttttttttttttttttttttttttttttttttt-test@test.test.gov.il *
-Fix: ttttttttttttbezeqint.netilttttttttttt-tttttttttgmail.comhtttttttttgmail.comgtttttttttttttttttttttt.health.gov.iltestt-tttttttttt.edu.auiltttttttttttttt.technion.ac.ilttttttttttttttttttttt77@gmail.com *
-Fix: tttttttttt-ttttttttttttttttttt-ttttttttttttttttttttttttttt.testt-ttttttttt@weizmann.ac.il *
-Fix: 22.2.07-17.4.07-23.4.07-23.4.07---25.6.07-..26.6.07-3.7.07-.-.5.9.07-.6.9.07-20.9.07-.23.9.07-.24.9.07-.25.9.07-.19.10.07-.21.10.07-.22.10.07-.23.10.07-.424.10.07-.test@te-test.co.il *
-Fix: ttttttttttttttttttttttt............9..tttttttttttttttttttttt.test.test.test.t@gmail.com *
-Fix: original: test@gov.ill | fix: test@gov.il | functionIds: 11 => if the domain is only a popular domain, it's invalid. *
-Fix: original: test@co..il | fix: test@co.il | functionIds: 4 => If the after fix contains only the domain end - Invalid email. *
-Need to be invalid: test_t@co.il | test1604@com.il (Need to do logic that if the domain part contains only the common domain end, it's invalid). *
-Fix: original: test.test@il.ey.bcom | fix: test.test@il.ey.om | functionIds: 12 => @il.ey.com *
-Clear all backups from the validation test left of real email addresses. *
-Fix: test@ymail.co | fix: test@ymail.co.il | functionIds: 11 => yahoo.com (change the logic for ymail.co/com => yahoo. rest gmail.com) - Canceled. *
-Fix: original: test@usu.army.mil | fix: test@usu.my | functionIds: 13 => .mil *
-Fix: original: test@tq.mnf-iraq.usmc.mil | fix: test@tq.us | functionIds: 13 => .mil *
-Fix: 19870914014@014.html - Need to be invalid. *
-Fix: original: something@something.name.com | fix: something@.me | functionIds: 14,-5 - Canceled. *
-Fix: a.b@example,com. *
-Fix: test@test...test.com *
-Fix: test@test-.netvision.net.il => test@netvision.net.il *
-LAST Add logic: *
-Do a list of all possible extensions after .com. - Found in \all_domains\com.txt *
-Check if exists. If exists, don't change it to .com *
-Then test: *
-Fix: test@test.com.ps *
-Fix: test@test.com.ps *
-Fix: test@test.com.ps *
-Fix: test@test.com.ps *
-Fix: test@test.com.ps *
-Fix: te@test.com.ps *
-Fix: test.test@test.com.ps *
-Fix: test@test.com.ps *
-Fix: test.test@test.com.ps *
-Fix: test.test@test.com.ps *
-Fix: test@test.com.ps *
-Fix: te-test.doc@test.com.vn *
-Fix: test.test@test.com.ps *
-Fix: original: test.test@2d.t.-com.hr | fix: test.test@2d.t-com.hr | functionIds: 33 *
-Fix: original: test.test@test.-com.hr | fix: test.test@test-com.hr | functionIds: 33 *
-Fix: test@test.co.illia.k *
-Do all the ToDo points. *
-Fix: bidur.index.co.iluploadinfocenterinfo_images20022012104713@fesaishaweb.jpg *
-Left invalid email addresses - Add to the invalid email addresses list. *
-Fix Email Addresses generator script. *
-Do backup. *
-Check for duplicates in all domain typos / domain ends typos / all cases email address list. *
-Check duplicates in all lists in the application. *
-Remove duplicates. *
-Add logic: *
-Do backup. *
-Change the logic of the log functionIds. Need to mark the name of the function *
  to not include in the log. By the names, get the ids and do the logic. *
-Check why there are no functionsIds logged when the email address is detected as invalid. *
-Check it works on development. *
-Fix: JOBS.OSEM@IL.NESTLE.COM | fix: JOBS.OSEM@il.es | functionIds: 3,24 *
-Check that production works. *
-Remove comment of new ValidEmailAddressModel(''), *
-Make sure that in validateEmailAddress.test.js it's empty. *
-Uncomment in the sand script. *
-After all fix - Check that everything works ok (development) and check test cases results + typos of all popular domains. *
-Do backup. *
-Check if updates are available. If so, install them. *
-Recheck that everything works ok (development / production) and check test cases results + typos of all popular domains. *
-Check if any updates are available. *
-If so, do backup and update all. *
-Recheck that everything works ok (development / production) and check test cases results + typos of all popular domains. *
-Move to 'todo_tasks' to continue. *
-Implement all logic of 'global' / 'special logic'. *-Fix all invalid email addresses. *
-Fix all the bugs in the fastest way. Tasks that require much time - List them to future tasks. *
-Check that everything works ok (development / production) and check test cases results + typos of all popular domains. *
================ *
BEFORE each fix: *
================ *
DO BACKUP! *
=============== *
AFTER each fix: *
=============== *
-Add a case to the 'updates' list. *
-Check updates / invalid / valid cases. *
=================== *
-Step 1: *
-ZIP all the sources into one file, with password. *
-ZIP it with password, and save the password on KeyPass. *
-Test it's work with valid and invalid passwords. *
-Do a backup. *
-Change the logic here to load all the email addresses from the database into a single TXT file - Canceled. *
-In the start, before it gets big, check to see if it's ok - Canceled. *
-Once the file is complete, save it on sources - Canceled. *
-Put all the domains and this file into on place - Canceled. *
-Add a readme file of the count of email addresses and separated by comma - Canceled. *
-From the sources, delete all unneeded sources, except the domains and the ZIP file - Canceled. *
-Copy the sources inside the crawler to the global sources (if not exists already - check it) - Canceled. *
=================== *
-Step 2: *
-Copy the 25 function to a notepad. *
-Copy this document. *
-Do a backup. *
=================== *
-Step 3: *
-Go back to the version before the second scan. *
-Implement all the tasks there. *
-Implement the 25 function. *
-ToDo: Refactor - Build a function that already returns a split of the domain part when needed - Canceled. *
-On the todo tasks write conclusions and future tasks. *
-Continue with the todo_tasks document. *
=================== *
-ToDo: *
-1. All cases of rest of .co.il (add new list that contains only the long domains) - If indexOf > 1, define as the domain part. *
-2. .com - If not contained . after, aka .com., assign to .com . *
-After finishing to fix all - Go back to the 'CrawlerLogic' and validate again all the email addresses from the database. *
-Compare between the old fixes and the new ones - Make sure all are fixed and correct. *
-Make sure to keep only the 2 logs of the domain counts, all the rest of the sources - Delete. *
-Identical endings (listed here) - Move them to the file of the common domains. *
-Change the script name from 'domain counts' to 'fileCrawl' in all places - Canceled. *
-When finish to list all the bugs, delete all the sources of the email addresses (finished). *
-Check that everything works ok (development / production) and check test cases results. *
-Make sure to drop all database tables (email addresses and domains). *
-After finishing with fixing all, drop the tables from the database. *
-After all finish, change all the email addresses in the source tasks.txt to (test) - the local part. *
-Move all completed tasks to complete tasks.txt under 'sources tasks'. *
-Delete the backup of the source tasks. *
-Keep only the sources of the domain counts - The rest you should delete. *
-Change back the name of the connection string (remove the 'test'). *
-Remove from 'settings.js' the IGNORE_FILES - Leave the array empty - Canceled. *
-Copy the sources in the project to the outside source directory - Canceled. *
-Add the 'sources' directory to ignore in backups - Canceled. *
-Add logic that if development and no sources directory - Log an error about it (include where the files found) - Canceled. *
-Verify it works - Canceled. *
-Delete all 'sources' directories in all the backup directory (scan all the backups) - Canceled. *
-Do all the 'INSTRUCTIONS.md + README.md' tasks - Canceled. *
-Fix all spell mistakes in all misc documents. *

Tests Sources Tasks: *
==================== *
-On the 'C:\Or\Web\Crawler\Sources\FixesToImplement' path there are more fixes to implement. *
-Add tests: *
-Before anything you do - Do a backup! *
-Update NPM packages. *
-Run the cases script (isValid / isInvalid) and write here the results: X valid, Y invalid. *
-In the 'C:\Or\Web\Crawler\Sources\EmailAddressesSources' path there are multi sources of testing email addresses. *
-Build a script that reads from a file, validates the email addresses, and runs the domain count script. *
-It will work like the normal script, just create another service that will fetch email addresses from files instead of links. *
-Make sure that you read the file with large files, read the line NPM package or something. Look for it in the EmailsManager project. *
-Make sure that the script can read all files: txt, bak, xlsx, csv, and others. *
-List all the bugs of the email addresses here. *
-After each file you scan - Fix it's errors, and recheck that nothing went wrong with the case script (isValid / isInvalid). *

Other Tasks: *
============ *
-Build logic in the initial step to check that there is at least 1 active search engine to work with. *
-Test the logic of checking if at least 1 search engine is active - Misspell all search engines if needed. *
-Before anything you do - Do a backup! *
-Update NPM packages. *
-Add puppeter.js nice close when end of all processes: Build function in *
 puppeterService that closes the browser if exists, and calls it when the process ends. *
 -Add logic to check when performing Dropbox backup - Verify that Dropbox is running. If not - Throw error - Canceled. *
-Fix bug of time - 4:30 minutes and see 5/5 when goal is complete: *
===[GENERAL] Time: 00.00:04:30 [\] | Goal: MINUTES | Progress: 5/5 (100.00%) | Status: FINISH=== *
-Change the 'dropbox' backup to secondary backup path. Change it to iOmega path. *
-Development mode off: Test invalid search engine address and make sure it's not active. If no one else is active - Throw an exception. *

Tasks From Production Tests: *
============================ *
-Change all the validation service and the initiate service. *
-Create local status functions with only the status, the color is status (in all logics files). *
-Fix the bug with the node_modules directory. *
-Do all ToDo points. *
-Change IS_DEVELOPMENT_MODE to IS_PRODUCTION_MODE and all the logic all around the application. *
-Check final time if all tests, development and production works OK: *
-Development mode for 5 minutes. *
-emailAddressGenerator.test.js *
-emailAddressSandBox.test.js *
-emailAddressTestCases.test.js *
-emailAddressTypos.test.js *
-freeStyle.test.js *
-Production mode for 5 minutes. *
-linkCrawl.test.js *
-Fix bug of closing puppeteer browser after finish. *
-Add error numbers to all error messages. *
-Reset error numbers all over the source code. *
-Add new error numbers all over the code. *
-Create instructions to run this script on the INSTRUCTIONS.md file. *

IMPORTANT: *
========== *
-Add reminder to update both development and production package.json files when doing some changes - Canceled. *

Other Scripts Tasks: *
==================== *
-From the Manager project in the VisualizationTool project, take the relevant parts to do backups automatically. *
-Build a script that backups the project without temporary data. *
-Add option to do a backup to the Dropbox directory. *

Before Production Tasks: *
======================== *
-Do tests on all of the logic, check for links and email address domains need to filter, check for improvements in the email validation logics. *
-Make sure that in production the status changes frequency and not stuck in PAUSE. *
-The selected engine for production is Google. Test Google for 100 times, to filter all irrelevant links. *

Tasks From Production Tests: *
============================ *
-After all fixes done - Remove 'old-dist' from the project directories + from all places in the code + npmignore + eslintignore + gitignore. *
-The 'old-dist' needs to be in the outside 'sources' directory, not inside the project. *
-In the global initiate service - Verify that 'dist' directory exists. If not - Create it. *

Tasks From Production Tests: *
============================ *
-Fix last fixed - They are invalid: *
Time: 12:02:16 | isValid: true | original: argov.nurit@mail.huji.ac.il | fix: argov.nurit@mail.huji.ai | functionIds: 12 *
Time: 12:02:18 | isValid: true | original: gvanim@org.il | fix: gvanim@org.org.il | functionIds: 12 *
Time: 12:02:18 | isValid: true | original: statms@mail.biu.ac.il | fix: statms@mail.biu.ai | functionIds: 12 *
Time: 12:02:18 | isValid: true | original: jobs.osem@il.nestle.com | fix: jobs.osem@il.com | functionIds: 12 *
Time: 12:02:18 | isValid: true | original: HR.JOBS@il.gt.com | fix: HR.JOBS@il.com | functionIds: 12 *
Time: 12:02:20 | isValid: true | original: amigam@trdf.technion.ac.il | fix: amigam@trdf.technion.io | functionIds: 12 *
Time: 12:02:20 | isValid: true | original: Gila.Gutenberg@mail.biu.ac.il | fix: Gila.Gutenberg@mail.biu.ai | functionIds: 12 *
-Add more domain to filter. *
-Check why error pages do not count in error and error-in-a-row. *
-Add a 'stick' (like when installing / updating NPM packages) to the console line. *
-Change the logic that if the PAGE title is [PAGE ((-))] - Remove the current link. *
-Invalid fix - cv@modli.co | fix: cv@modli.co.il | functionIds: 11 *
-Invalid fix - HR@TheMarketingHub.co | fix: HR@themarketinghub.co.il | functionIds: 5,11 *
-Split the validation service to functions by category. *
-Fix all misspelling of characters / characters / characters in all applications. *
-Move emailAddressSettings to the global settings, create sections in this file. Transfer all settings of the tests also to this file + *
 Add validations to all new settings. *
-Separate the test database functions. *

Tasks From Production Tests: *
============================ *
-Fix: oshrat@basharon.co.il71 (get most popular domain ending, and if it's contains, replace it). *
-Fill the relevant function ids after some tests on production, after results from some tests being made on production. *
-Insert all the invalid links to the filter domains. *
-Add 'yourdomain.com' to filter. *
-Add 'calameo.com' to filter domains. *
-Invalid fix - .yadbyd@zahav.net.il | fix: yadbyd@zahav.co.il | functionIds: 7,17. *

Tasks From Production Tests: *
============================ *
-Check why invalid links don't being logged. *
-Fix time goal bug: ===[GENERAL] Time: 00.03:48:53 | Goal: MINUTES | Progress: 48/120 (40.00%) | Status: CRAWL=== *
-Add new validation that if the domain part contains 2 dots and numbers (Example: 1.3.2) - Invalid without any log. *
-After it works, remove all the invalid email addresses that contain 1.3.2, leave one for example. *
-Don't remove the old logic, and keep it just in case we will need it. *
-Add flag if to use advanced search keys or not, in settings.js. *
-Refactor search keys logic: *
1. Create class of SearchKey: keyType, isMiddleReplace, isNoSpaceAfter, globalKey, maleKey, femaleKey, bothKey. *
2. Create 2 enums of SearchKeyGenderEnum: MALE, FEMALE, BOTH and SearchKeyType: NEED, PERSON, PROFESSION, RELATION, CITY, EMAIL_ADDRESS. *
3. Backup all the search keys. *
4. Fill the classes (+add more or remove if needed). *
5. Change the logic of generating search keys accordingly. *
-Fix this: pkupot@moh.health.gov.i (fix fixDomainEnd function). *
-Find fix for ofer@0a5v3i-d7a2r6.3c9o6.i9l *
-Find a way to remove '.ai' from the file extensions for the email addresses. *

Tasks From Production Tests: *
============================ *
1. Create an enum of male / female / both - Canceled. *
2. Separate all the keys for male / female / both - Canceled. *
3. Change the logic of the search key to add search key by male / female / both - Canceled. *
-Add logic of invalid email address - if the local part contains file name, don't log it to the invalid email address - Canceled. *
-Find more points to list here. *

Tasks From Production Tests: *
============================ *
-Go thought all files and see if need to pass to the settings.js stuff. *
-In domains.logic.js move all the logic to domainsCounterService.js + Change the logic to pass parameters to the script service. *
-When the application finishes to run, automatically run the domain counter script *
 (domains.logic.js) (add it a flag in the settings.js) (only if any email addresses length bigger from 0). *
-Add flag on settings.js for log status instead of log console line. *
-Fix the 'Save' count to be with commas. *
-Put all the numbers of all the functions in the fixed log functions array. *
-Fix bug with same number of directory. *
-Add the current mode to the log directory name - Canceled. *
-Fix bug with proxy on all json files. *
-Add logic to log the development TXT files to the development directory. Same for production and for scripts. *
-Change the logic of path of script with new enum for scripts. *
-Each script will be written to the relevant directory by the mode. *
-Add logic to remove only the directories with the current mode word - Canceled. *
-Add logic to remove only the directory of the current mod in the dist directory. *
-Add the word 'configuration' to all files inside the configuration directory and rename in all places. *
-Inside of 'configurations' directory there is a file with 'settings' key, remove it. *
-Add flag to clear previous dists directories. *
-Fix bug with generator service of InvalidEmailAddressModel class. *
-Add logic for steps activation: *
-Links X | Crawl X | Send X - Error. *
-Links V | Crawl X | Send X - OK. *
-Links X | Crawl V | Send X - Error. *
-Links X | Crawl X | Send V - Error. *
-Links V | Crawl V | Send V - OK. *
-Links X | Crawl V | Send V - Error. *
-Links V | Crawl X | Send V - OK. *
-Links V | Crawl V | Send X - OK. *

Unsolved Tasks: *
=============== *
-When drop collection on production, sometimes have a bug: *
MongoError: cannot perform operation: a background operation is currently running for collection crawl_production.emailaddresses *
    at MessageStream.messageHandler (C:\Or\Web\Crawler\Crawler\node_modules\mongodb\lib\cmap\connection.js:261:20) *
    at MessageStream.emit (events.js:311:20) *
    at processIncomingData (C:\Or\Web\Crawler\Crawler\node_modules\mongodb\lib\cmap\message_stream.js:144:12) *
    at MessageStream._write (C:\Or\Web\Crawler\Crawler\node_modules\mongodb\lib\cmap\message_stream.js:42:5) *
    at doWrite (_stream_writable.js:441:12) *
    at writeOrBuffer (_stream_writable.js:425:5) *
    at MessageStream.Writable.write (_stream_writable.js:316:11) *
    at Socket.ondata (_stream_readable.js:714:22) *
    at Socket.emit (events.js:311:20) *
    at addChunk (_stream_readable.js:294:12) *
    at readableAddChunk (_stream_readable.js:275:11) *
    at Socket.Readable.push (_stream_readable.js:209:10) *
    at TCP.onStreamRead (internal/stream_base_commons.js:186:23) { *
  ok: 0, *
  errmsg: 'cannot perform operation: a background operation is currently running for collection crawl_production.emailaddresses', *
  code: 12587, *
  codeName: 'BackgroundOperationInProgressForNamespace', *
  name: 'MongoError', *
  [Symbol(mongoErrorContextSymbol)]: {} *
} *
Promise { *
  <rejected> MongoError: cannot perform operation: a background operation is currently running for collection crawl_production.emailaddresses *
      at MessageStream.messageHandler (C:\Or\Web\Crawler\Crawler\node_modules\mongodb\lib\cmap\connection.js:261:20) *
      at MessageStream.emit (events.js:311:20) *
      at processIncomingData (C:\Or\Web\Crawler\Crawler\node_modules\mongodb\lib\cmap\message_stream.js:144:12) *
      at MessageStream._write (C:\Or\Web\Crawler\Crawler\node_modules\mongodb\lib\cmap\message_stream.js:42:5) *
      at doWrite (_stream_writable.js:441:12) *
      at writeOrBuffer (_stream_writable.js:425:5) *
      at MessageStream.Writable.write (_stream_writable.js:316:11) *
      at Socket.ondata (_stream_readable.js:714:22) *
      at Socket.emit (events.js:311:20) *
      at addChunk (_stream_readable.js:294:12) *
      at readableAddChunk (_stream_readable.js:275:11) *
      at Socket.Readable.push (_stream_readable.js:209:10) *
      at TCP.onStreamRead (internal/stream_base_commons.js:186:23) { *
    ok: 0, *
    errmsg: 'cannot perform operation: a background operation is currently running for collection crawl_production.emailaddresses', *
    code: 12587, *
    codeName: 'BackgroundOperationInProgressForNamespace', *
    name: 'MongoError', *
    [Symbol(mongoErrorContextSymbol)]: {} *
  } *
} *

Unsolved Tasks: *
=============== *
-Still stuck sometimes: *
1: *
===[SETTINGS] Mode: PRODUCTION | Database: crawl_production | Drop: true | Steps: LINKS=== *
===[GENERAL] Time: 00.00:02:20 | Goal: LINKS | Progress: 61/1,000 (06.10%) | Status: PAUSE=== *
===[PROCESS] Process: 2/2 | Page: 3/3 | Engine: google | Key: ליימ-יא בוני ל"כנמ תריכזמל הדיקפ שורד=== *
===[LINK] Crawl: ✅  61 | Total: 292 | Filter: 231 | Error: 0 | Error In A Row: 0 | Current: (-)=== *
===[EMAIL ADDRESS] Save: ✅  0 | Total: 0 | Database: 0 | Exists: 0 | Invalid: ❌  0 | Valid Fix: 0 | Invalid Fix: 0 | Unsave: 0 | Filter: 0=== *
===[TRENDING] === *
===[PAGE ((-))] http://www.jobcrawler.co.il=== *
===[SEARCH (3/3)] https://www.google.com/search?q=דרוש+פקידה+למזכירת+מנכ"ל+ינוב+אי-מייל&ei=PGo5XqvTJpCT8gKAyo3gDw&start=12&sa=N&ved=2ahUKEwir4a6q-bf=== *
2: *
===[SETTINGS] Mode: PRODUCTION | Database: crawl_production | Drop: true | Steps: LINKS=== *
===[GENERAL] Time: 00.00:01:18 | Goal: EMAIL ADDRESSES | Progress: 0/30 (00.00%) | Status: PAUSE=== *
===[PROCESS] Process: 2/2 | Page: 3/3 | Engine: bing | Key: ליימ-יא ןרוצ םיטנמוקוד תדיקפ ה/שורד=== *
===[LINK] Crawl: ✅  44 | Total: 270 | Filter: 226 | Error: 0 | Error In A Row: 0 | Current: (-)=== *
===[EMAIL ADDRESS] Save: ✅  0 | Total: 0 | Database: 18 | Exists: 0 | Invalid: ❌  0 | Valid Fix: 0 | Invalid Fix: 0 | Unsave: 0 | Filter: 0=== *
===[TRENDING] === *
===[PAGE ((-))] === *
===[SEARCH (3/3)] https://www.bing.com/search?q=דרוש/ה+פקידת+דוקומנטים+צורן+אי-מייל&qs=n&sp=-1&pq=%d7%93&sc=0-1&sk=&cvid=AD0065E122BA4D3BA6916409816=== *

Tasks From Production Tests: *
============================ *
-Add logic that if more than 2 unsave (configured from settings.js) - Break the processes. *
-Add enum to the keys of '#DATE#' and every one of it's kind. *
-Add new logic: recovery swipe. If the email is invalid after the 2 final validation email addresses, add logic *
 to search for a key value. If found, it will change the status from invalid to fix, and will be saved and logged (if not already exists). *
-Add to the validation fix a method - On the local part - Convert multiply repeated dots to single dot. *
-Add validation on the validation email address method that if it's a common domain, minimum 1 character on the local part is an exception (add in settings.js). *
-Fix bug of random typos tests. *
-Create enum for steps and replace it in the relevant places. *
-Change the name of 'independent utils' to 'global utils'. *
-Fix bug with link test. *

End of Process Tests: *
===================== *
-Verify (in development / production modes) - That the application ends: *
-When goal reached (check with 3 kinds of goals) - Check each with CRAWL step true and false. *
-When the process reaches its limit - Check each with the CRAWL step true and false. *
-On development mode (check with 3 kinds of goals): *
1. Check errorPageInARowCounter. *
2. Check with an unsave limit. *
-Add to the end process - Check each goal with different steps. *
-Tests checkList: *
Development: *
Email Addresses: *
1. Max processes: 3. All steps. Email addresses goal - 30 Email addresses (stop by goal). *
2. Max processes: 3. All steps. Email addresses goal - 1000 Email addresses (stop by processes). *
3. Max processes: 3. no crawl step. Email addresses goal - 30 Email addresses (stop by processes). *
4. Max processes: 3. no crawl step. Email addresses goal - 1000 Email addresses (stop by processes). *
Minutes: *
1. Max processes: 3. All steps. Minutes goal - 1 minute (stop by goal). *
2. Max processes: 3. All steps. Minutes goal - 100 minute (stop by processes). *
3. Max processes: 3. no crawl step. Minutes goal - 1 minute (stop by goal). *
4. Max processes: 3. no crawl step. Minutes goal - 100 minute (stop by processes). *
Links: *
1. Max processes: 3. All steps. Links goal - 100 links (stop by goal). *
2. Max processes: 3. All steps. Links goal - 100000 links (stop by processes). *
3. Max processes: 3. no crawl step. Links goal - 100 links (stop by goal). *
4. Max processes: 3. no crawl step. Links goal - 100000 links (stop by processes). *
Other:
1. Check errorPageInARowCounter. *
2. Check with an unsave limit. *
Production: *
Email Addresses: *
1. Max processes: 2. All steps. Email addresses goal - 30 Email addresses (stop by goal). *
2. Max processes: 2. All steps. Email addresses goal - 10000 Email addresses (stop by processes). *
3. Max processes: 2. no crawl step. Email addresses goal - 30 Email addresses (stop by processes). *
4. Max processes: 2. no crawl step. Email addresses goal - 1000 Email addresses (stop by processes). *
Minutes: *
1. Max processes: 2. All steps. Minutes goal - 1 minute (stop by goal). *
2. Max processes: 2. All steps. Minutes goal - 100 minute (stop by processes). *
3. Max processes: 2. no crawl step. Minutes goal - 1 minute (stop by goal). *
4. Max processes: 2. no crawl step. Minutes goal - 100 minute (stop by processes). *
Links: *
1. Max processes: 2. All steps. Links goal - 100 links (stop by goal). *
2. Max processes: 2. All steps. Links goal - 100000 links (stop by processes). *
3. Max processes: 2. no crawl step. Links goal - 100 links (stop by goal). *
4. Max processes: 2. no crawl step. Links goal - 100000 links (stop by processes). *

Tasks From Production Tests: *
============================ *
-Comment all the current logic of the try recover. *
-Create new class of ValidEmailAddressModel and InvalidEmailAddressModel. For the invalid add recover field. *
-Move all the test cases inside these classes. *
-Change the file name to 'emailAddressesLists'. *
-For the invalid email addresses that have recovered, add it. *
-Change the logic in the test cases and in all places to load the classes. *
-Uncomment the recover logic and finish the recover logic with a more elegant way. *
-Fix 'jobs@theisraelproject.org-tip' => 'tip-jobs@theisraelproject.org'. *
-Check if an invalid email address exists in the invalid email addresses list. If it already exists, don't log it to the TXT file. *
-Change Drop Collection to Clear Database - Canceled. *
-Add enum for mode, and add to the application data. *
-Add for development mode a different collection name. Add 'development' or 'production' according to the mode. *
-Add the database name to the console line and to the confirm settings. *
-Add 'wallatours.co.il' to common typos if needed according to domain counter script. *
-Add on typos letters in the start and end of the domain - Already exists. *
-Add typos of random 1-5 characters in the start and the end of the domain - Already Exists. *
-Add retries to the database save action in case failure (add maximum number of retries from settings.js). *
-Create a list of recovered email addresses. *

Tasks From Production Tests: *
============================ *
-Do the logging refectory to log fixes only with specific functions ids. *

Unordered Tasks: *
================ *
File1: *
-Remove similar domain logic. *
-Add for each different domain is its own common domain typos. *
-Test walla.com and walla.co.il after the change. *
-Do it also for 012.net, 012.net.il and zahav.net.il, 013.net.il *
-Add the domain counter script from a string comma delimiter. *
-Bonus: Add the domain counter script option to load from recursive TXT files or from database (the *
 count function in the end is to receive an array of email addresses and to count). *
File2: *

LOGS: *
===== *
-Change the logic of logging - Each session will have seperated directory with running number and date and time. *
-Move to directory with unique name with running index number (1_crawl_20200229_124737). On development empty all directories. *
-Convert the function ids to enum, to be global, for the next task - Canceled. *
-Add logic to list a 'fixed' TXT file according to specific functions including numbers, like (13, -1, -10). *

Tasks From Production Tests: *
============================ *
-On the 'searchEngine.js', need a quick array on the top of active and not active that will determine which search engine is active. *
-On 'IMPORTANT SETTINGS' log the active search engines. *

Tasks From Production Tests: *
============================ *
-Fix bug that when processes run one after another and no crawl links and no save email addresses - The application never ends. *
-Add logic to filter specific email addresses, not by domain, by the whole email address, convert to lowercase and check. *
-Handle error pages: *
1. Add the console line to the link part: error. *
2. List all the error counts in the console line. *
3. Write to log all the error links. *
4. Add error-in-row counter. If error-in-row is above 20 (configured from settings.js) the application will stop with appropriate exit reason. *

Tasks From Production Tests: *
============================ *
-Check key: 'Key: ינורטקלא-ראוד אבס רפכ יאלמ לוהינ תיארחא ה/שור===' *
-Add 'files' directory and index.js file to the scripts directory - Canceled. *
-Update the invalid email address list (from here and from other sources) according to last crawlings. *
-Fix '05015808@001.html' and '01012013113204@rishom.pdf' *
-On the 'fixed' TXT file, add the time: 'Time: 23:57:23 | isValid: true | original: JP@JOBPOWER.CO.IL | fix: JP@jobpower.co.il | functionIds: 5'. *
-Create a list of links that timeout - For future use. Put it on misc. *
-When initiate the 'emailAddressDomainDetailsList' - Remove duplicates from it. *
-On the preload.script.js, if the package.json changed, delete also the package-lock.json before running the initial script. *
-Do the 'domain count' list script. *
-After getting results from the domain count script - Add more common typos. *
-Verify that the lower case the domain part automatically. *
-Add the 'valid fix' to the save TXT file list automatically. *
-Save the both on the 'valid fix' TXT file and in the 'save' TXT file. *
-Fix the bug of (PAGE 1/0) / Current: 1/0. Zero is not needed. *
-On LINKS mode only, can't see the current link (PAGE 1/0) / Current: 1/0. *
-When the last link on PAGE (12/12) it switches to PAGE (12/0). *
-On LINKS mode only, the process does not stop after reaching 10/10. *
-On production, process 10/10 with 175/1,000 email address - It won't stop: *
===[SETTINGS] Mode: PRODUCTION | Drop: false | Steps: LINKS,CRAWL=== *
===[GENERAL] Time: 00.00:08:14 | Goal: EMAIL ADDRESSES | Progress: 175/1,000 (17.50%) | Status: PAUSE=== *
===[PROCESS] Process: 10/10 | Page: 1/3 | Engine: google | Key: ליימ ןופשר היצרטסינימדא תדבוע שורד=== *
===[LINK] Crawl: ✅  130 | Total: 872 | Filter: 742 | Current: 9/0=== *
===[EMAIL ADDRESS] Save: ✅  175 | Total: 1,480 | Database: 241 | Exists: 378 | Invalid: ❌  15 | Valid Fix: 13 | Invalid Fix: 0 | Unsave: 0 | Filter: 0=== *
===[TRENDING] === *
===[PAGE (9/0)] === *
===[SEARCH (1/3)] https://www.google.com/search?q=דרוש+עובדת+אדמיניסטרציה+רשפון+מייל&ei=PGo5XqvTJpCT8gKAyo3gDw&start=10&sa=N&ved=2ahUKEwir4a6q-bfnAh=== *
-Script 'npm run preload' not downloading puppeteer browser, need to check why - Canceled. *

Other Scripts Tasks: *
==================== *
-Add another script that scan from string of email addresses (fetch email addresses), all the *
 email addresses and log all the domains with count sorted descending to separated TXT file: *
3,667 | gmail.com *
3,633 | yahoo.com *
-Bonus: Different sources: string fetch email addresses / array of email addresses / TXT files path fetch email addresses *
 (recursive logic to the 'old-dist' directory for example) / database (by enum flag). *

Tasks From Production Tests: *
============================ *
-Fix Dudu8193@gmail.comA (Build a function that check if the domain part exists in the list of common domains, *
 but not equal to the domain, if so, re-assign the domain instead of the original). *
-Build a function that removes on loop from start or end with these characters - Remove them in loop (',.-_). *
-Refactor start and end removal: *
-To handle this - Build a functions that call 4 different functions: *
-Create a function that removes all from the start of the local part. *
-Create a function that removes all from the end of the local part. *
-Create a function that removes all from the start of the domain part. *
-Create a function that removes all from the end of the domain part. *
-Once replace, start the process again from the beginning. *
-After the fix, check the following out: *
-Fix all ...ckerenc@gmail.com | -dafnac@e-learning.co.il (start or end with these characters - Remove them in loop). *
-Fix einat@bariglobali.com._ (add to replace). *
-Remove the loop functions that exist today. *
-Add the 'old_dist' to all ignore directories anywhere. *
-Rearrange tasks here from faster to slower and important. *
-Change the 'searchEngineLink' to 'google.com'. *
-Set the initiate of the puppetterService.js. *
-Create an initiateService that calls each test, and on the crawl logic - The current logic doesn't work. *
-However, don't touch the preload script. *
-Remove all the scripts with the initiate, bring the state back to normal. *
-Test the puppeteer.js to find out if MILLISECONDS_TIMEOUT_SOURCE_REQUEST_COUNT / MILLISECONDS_WAIT_LOAD_PAGE_COUNT needed. *
-Remove from settings the timeout load per page, need to the parameter of this in the settings.js. *
-On the 'IMPORTANT SETTINGS' display the active search engine(s), the goal type and the goal value. *
-Rearrange settings.js by priority. *
-Fix all 'zahav.net.il' and '012.net.il into '012.net'. *
-Add 'zahav.net.il' to similar domains of '012.net'. *
-Remove all the typos of any similar domain - Fix only the addresses that are identical in the structure. *
-Septate all asKnownAs to more common typos. *
-Remove duplicate with DupChecker. *
-Add more typos and test the new common typos. *
-Fix mailto.bamboo@gmail.com (remove the mailto from the invalid list). *
-Fix shellysb@.matnasim.org.il (add to replace). *
-Fix miyuval@wallal.com (add to typos). *
-Fix tifool@bat-ami.org.i (add to missing typos ending). *
-Fix to lower case: DODO8193@GMi.COM (make sure all domain parts are lower case in the database). *
-Fix a@walla.com (check minimal length on the local part). *
-Change 'scanEmailAddress' to 'validateEmailAddress'. *
-Check nbi@absahsahraoronn.c.coo..iill | fix: nbi@absahsahraoronn.c.coo.iill *
-To handle file extensions - Build a functions that call 4 different functions: *
-Create a function that validates if the start of the local part is file extension from a list. *
-Create a function that validates if the end of the local part is file extension from a list. *
-Create a function that validates if the start of the domain part is file extension from a list. *
-Create a function that validates if the end of the domain part is file extension from a list. *
-After the fix, check the following out: *
-Fix *
300_300Laura-Truscott-@-Rick-Roberts-Hair-for-Schwarzkopf-Professional-UK-398.jpg | 520.6_Karly-Whittaker-@-Sarah-Hodge-for-Schwarzkopf-Professional-UK-465.jpg *
-Check image002.gif@01CD5E8E.5DCE4AA0 | fix: image002.gif@01cd5e8e.5dce4aa0 *

Tasks From Production Tests: *
============================ *
-Add logic that if ends with more than 3 dots or equal to 3 dots ('...') it's invalid - Canceled. *
-Add logic on fix, that if exists in 'isKnownAs' - Don't fix it - Canceled. *
-Check ilan@trio-h... | fix: ilan@trio-h - Canceled. *
-Check the nightcrawler. *
-Create test file for crawl links. *
-Add timeout of crawl of 30 seconds - 'http://www.ariel.ac.il/projects/jobs' stacked for a long time. *
-Fix exception of CONNECTION_TIMED_OUT: *
(node:1272) UnhandledPromiseRejectionWarning: Error: net::ERR_CONNECTION_TIMED_OUT at https://www.acabafrs.ga/rashlanut *
    at navigate (C:\Or\Web\Crawler\Crawler\node_modules\puppeteer\lib\FrameManager.js:120:37) *
    at runMicrotasks (<anonymous>) *
    at processTicksAndRejections (internal/process/task_queues.js:97:5) *
    at async FrameManager.navigateFrame (C:\Or\Web\Crawler\Crawler\node_modules\puppeteer\lib\FrameManager.js:94:17) *
    at async Frame.goto (C:\Or\Web\Crawler\Crawler\node_modules\puppeteer\lib\FrameManager.js:406:12) *
    at async Page.goto (C:\Or\Web\Crawler\Crawler\node_modules\puppeteer\lib\Page.js:672:12) *
    at async PuppeteerService.crawl (C:\Or\Web\Crawler\Crawler\src\services\files\puppeteerService.js:18:9) *
    at async SourceService.getPageSourceProduction (C:\Or\Web\Crawler\Crawler\src\services\files\source.service.js:101:16) *
    at async CrawlEmailAddressService.getEmailAddressesFromPage (C:\Or\Web\Crawler\Crawler\src\services\files\crawlEmailAddress.service.js:61:22) *
    at async CrawlLogic.scanEmailAddresses (C:\Or\Web\Crawler\Crawler\src\logics\crawl.logic.js:200:38) *
    at async CrawlLogic.crawlLinks (C:\Or\Web\Crawler\Crawler\src\logics\crawl.logic.js:185:13) *
    at async CrawlLogic.runProcess (C:\Or\Web\Crawler\Crawler\src\logics\crawl.logic.js:174:13) *
    at async CrawlLogic.startProcesses (C:\Or\Web\Crawler\Crawler\src\logics\crawl.logic.js:145:13) *
    at async Timeout._onTimeout (C:\Or\Web\Crawler\Crawler\src\logics\crawl.logic.js:123:17) *
  -- ASYNC -- *
    at Frame.<anonymous> (C:\Or\Web\Crawler\Crawler\node_modules\puppeteer\lib\helper.js:111:15) *
    at Page.goto (C:\Or\Web\Crawler\Crawler\node_modules\puppeteer\lib\Page.js:672:49) *
    at Page.<anonymous> (C:\Or\Web\Crawler\Crawler\node_modules\puppeteer\lib\helper.js:112:23) *
    at PuppeteerService.crawl (C:\Or\Web\Crawler\Crawler\src\services\files\puppeteerService.js:18:20) *
    at runMicrotasks (<anonymous>) *
    at processTicksAndRejections (internal/process/task_queues.js:97:5) *
    at async SourceService.getPageSourceProduction (C:\Or\Web\Crawler\Crawler\src\services\files\source.service.js:101:16) *
    at async CrawlEmailAddressService.getEmailAddressesFromPage (C:\Or\Web\Crawler\Crawler\src\services\files\crawlEmailAddress.service.js:61:22) *
-Put try catch on specific error of: *
(node:9864) UnhandledPromiseRejectionWarning: TimeoutError: Navigation timeout of 30000 ms exceeded *
    at C:\Or\Web\Crawler\Crawler\node_modules\puppeteer\lib\LifecycleWatcher.js:142:21 *
  -- ASYNC -- *
    at Frame.<anonymous> (C:\Or\Web\Crawler\Crawler\node_modules\puppeteer\lib\helper.js:111:15) *
    at Page.goto (C:\Or\Web\Crawler\Crawler\node_modules\puppeteer\lib\Page.js:672:49) *
    at Page.<anonymous> (C:\Or\Web\Crawler\Crawler\node_modules\puppeteer\lib\helper.js:112:23) *
    at PuppeteerService.crawl (C:\Or\Web\Crawler\Crawler\src\services\files\puppeteerService.js:25:20) *
    at processTicksAndRejections (internal/process/task_queues.js:97:5) *
    at async SourceService.getPageSourceProduction (C:\Or\Web\Crawler\Crawler\src\services\files\source.service.js:101:16) *
    at async CrawlEmailAddressService.getEmailAddressesFromPage (C:\Or\Web\Crawler\Crawler\src\services\files\crawlEmailAddress.service.js:61:22) *
    at async CrawlLogic.scanEmailAddresses (C:\Or\Web\Crawler\Crawler\src\logics\crawl.logic.js:200:38) *

Test Production Tasks: *
====================== *
-Set the IS_DEVELOPMENT_MODE to false. *
-Set the DROP_Collection to false *
-Delete the node_modules directory. *
-Manually drop the collection from the Mongo database. *
-Run 'npm run io' script. *
-On the steps in the settings, leave only the LINKS active = true. *
-Fetched links, and see if it works well. *
-Make sure all working well, and you filtered all the irrelevant links (test it 100 processes). *
-Once done, activate the CRAWL step. *
-Test it a large number of times. *
-Search invalid and fix invalid to see if it needs to change any logic, and list it below. *
-List as many fixes of domains, validation, all bugs relevant, list them below. *

Tasks: *
====== *
-Find duplicate logics and refactor, by DupChecker extension. *
-Write more tasks for the future. *
-Need a pre-run script to run all the initiate things that need for any logic: *
1. Exception handling. *
2. node_modules directory check. *
3. Do logic to auto 'npm i' if missing - Canceled. *
4. Validate that node_modules exists and are not empty (before and after npm i). *
5. Load needed stuff for validate email addresses - Canceled. *
-Remove the logic of multi package.json files. *
-Bring back the logic of editing the package.json file according to the mode, before doing the 'npm i' programmatically. *
-Remove all unused functions and files. *
-Format all documents. *
-Remove all comments of unused code in all files. *
-In console_line_index.txt write each parameter in the console, what it's role is and what is the meaning of it. *
-Fix all spelling mistakes in all TXT tasks files. *
-Fix spelling mistakes on all tasks documents and on 'status_index.txt' documents. *

Tasks: *
====== *
-Separate 'package.json' into development/production files. *
-Replace all 'console.log' with logUtils.log. *
-Implement the logic of puppeteer.js and leave it with comments. *
-Continue with ToDo points. *
-Do all the ToDo points. *
-Move to logService the 'logScore' in the tests. *
-Reformat to one line all short objects initialize. *
-Do all { } in the relevant places, don't need const = results if not needed. *
-Implement the logic with puppeteer.js and build an alternative package.json for development and for production - *
Don't forget to write about it in the README.md file. *-Add the real logic of crawling source with puppeteer.js - Take it from one of the sources *
 (implement also load time and timeout time + make sure not to load styles and images). *
-On tests, when you test 'walla.com' you will see nothing is valid. Need to add 'alsoKnownAs' or field like that. *
-It will be done by array that updates each module of 7 new email addresses. *
-At home, copy the settings for DupChecker and search for duplicates logics and refactor them with the plugin for that. *

NPM i Script Tasks: *
=================== *
-The goal is to build 1 script that will initiate the 'npm i' command NPM packages without all the development and testings NPM packages - Canceled. *
-First thing of all, do order in that NPM packages need to be in devDependencies and which NPM packages need to be in the dependencies - Canceled. *
-Test edit json - Canceled. *
-The first check is to check if node_modules directory exists. If not, continue with the rest of the logic. If it exists, ignore the rest of the logic - Canceled. *
 that is related to creating the node_modules directory - Canceled. *
-The first thing to do on any script running, is to edit the package.json file - Canceled. *
-Delete the package-lock.json file - Canceled. *
-If it's development mode, rewrite the dependencies and devDependencies to be without puppeteer.js - Canceled. *
-If it's production mode, rewrite the dependencies and devDependencies to be with puppeteer.js - Canceled. *
-Do 'npm i' and log the result - Canceled. *
-Continue the initiate script in 'Other Tasks' - Canceled. *

Tasks: *
====== *
-On the generator of the tests - Add a function that will return a random email address from the database. *
-Add validation on the generated search key max and min length (from settings.js). *
 If exceeded the limits - Retry to generate other key (limit to 10 (configured) retries). *
-Build a function that retry logic with limit count, and replace it in all the relevant places - Canceled. *
-Add 'lorem-ipsum' npm package to the email generator. *
-Change 'linkService' to 'crawlLinksService', and 'emailAddressService' to 'crawlEmailAddressService'. *
-Change all 'URL' to link. *
-'INITIATE THE XXXX' - Add the 'SERVICE' word - Canceled. *
-'INITIATE THE XXXXX' - Repeat itself. Can be self function with a word as a parameter - Canceled. *
-All 'INITIATE THE XXXXX' services - Change it to 'INITIATE THE SERVICES'. *
-Fix bug with 'database' counter when drop collection is false. *
-Fix bugs with testing. *
-New console line structure: *
===[SETTINGS] Mode: DEVELOPMENT/PRODUCTION | Drop: true/false | Steps: Links, Crawl, Send *
===[GENERAL] Time: 00.00:00:11 | Goal: EMAIL ADDRESSES | Progress: 27/50 (54.00%) | Status: PAUSE=== *
===[PROCESS] Process: 1/10 | Page: 2/3 | Engine: bing | Key: הריכזמ השורד=== *
===[LINK] Crawl: ✅  18 | Total: 72 | Filter: 54 | Current: 2/9=== *
===[EMAIL ADDRESS] Save: ✅  27 | Total: 282 | Database: 27 | Exists: 18 | Invalid: ❌  45 | Valid Fix: 2 | Invalid Fix: 6 | Unsave: 0 | Filter: 79=== *
===[TRENDING] === *
===[PAGE (2/9)] https://www.drushim.co.il/jobs/search/%d7%9e%d7%96%d7%9b%d7%99%d7%a8%d7%94=== *
===[SEARCH (2/3)] https://www.bing.com/search?q=דרושה+מזכירה&qs=n&sp=-1&pq=%d7%93&sc=0-1&sk=&cvid=AD0065E122BA4D3BA69164098163F923&first=11&FORM=PER=== *
-On system.utils - Move to a function on system utils that exits the application (with reason, like in the application today). *
-Add option of color to the '===' in the status. *
-Add 'Fix: ' in the TRENDING section in the console line. *
-Replace the 'this.processStarted' with check that the startDateTime parameter is not null. *
-Change 'IS_TEST_MODE' to 'IS_DEVELOPMENT_MODE' + Change in all places. *
-On development mode off (but on development mode for tests and creation) - When running 'npm start' *
 The first thing to show, even before any load of anything, It will log the following: *
 ===SETTINGS=== *
IS_DEVELOPMENT_MODE: true *
IS_DROP_COLLECTION: true, *
SEARCH_KEY: null, *
IS_LOG_VALID_EMAIL_ADDRESSES: true, *
IS_LOG_FIX_EMAIL_ADDRESSES: true, *
IS_LOG_INVALID_EMAIL_ADDRESSES: true, *
IS_LOG_UNSAVE_EMAIL_ADDRESSES: true, *
IS_LOG_CRAWL_LINKS: true, *
=============== *
Ok to start? y/n *
-Only when hit 'y' run the application. *
-All settings names will be in purple. *
-Again, this message will only show on production (IS_DEVELOPMENT_MODE = false). *
-It will cancel the task for the delay of the drop collection. *
-On development mode off - Add delay if the flag to clear the database is true, with a counter of a - Canceled. *
 minute (configured) until it happens - Give the time and the option to abort - Canceled. *
-Add 3 more booleans in the settings under 'STEPS': IS_LINKS_STEP / IS_CRAWL_STEP / IS_SEND_STEP. *
-Add logic to activate each step according to the settings.js. *
-Add flag 'isCrawlEmailAddresses' in the settings. Default is true, but if it's false, After the link fetch (include log the link) - Canceled. *
 no further actions will be taken. It's good for test links, and test other stuff - Canceled. *
-Improve the function of log to confirm settings. *
-Add it also to the 'IMPORTANT SETTINGS' message. *
-Fix bug with number of processes exceeded the limit in the end. *
-Fix bug of display minutes on progress with leading zero. *
-Fix bug of continue after 10 processes. *
-Test the goals in low numbers. *
-Update new syntax logic of package 'uuid' on NPM. *
-Fix bug on uuid when error occurred. *
-Rename 'CrawlData.js' to 'ApplicationData.js'. *

Tasks: *
====== *
-Add minimum validation of 1 character for local part (error) and 3 characters the domain part (error): *
1. Add to the settings the minimal characters length of each part and total min. *
2. Check the min in the validation function. *
-Max characters are 130 (configure within the settings.js). Example: ehshsh@shsg.com | shaga@gmail.com | shsgsg@yahoo.com *
-Add booleans for each one of the logs from the settings. *
-Add option to search by specific search key instead of random one. *

Tasks: *
====== *
-New structure of the console status line: *
===[GENERAL] Time: 00.00:00:19 | Goal: LINKS | Progress: 94/50 (188.00%) | Status: PAUSE=== *
===[PROCESS] Process: 1/10 | Page: 2/3 | Search Engine: bing | Key: Email ןח-תעבג תדיקפ ה/שורד=== *
===[LINK] Crawl: ✅15 | Total: 94 | Filter: 64 | Current: 3/15 *
===[EMAIL ADDRESS] Save: ✅50 | Total: 316 | Database: 50 | Exists: 18 | Invalid: ❌42 | Valid Fix: 4 | Invalid Fix: 10 | Unsave: 0 | Filter: 84=== *
===[TRENDING]: luiza@qhr.co.il | jobs@totaladmin.co.il | nluiza@qhr.co.il=== *
===[PAGE (1/15)]: https://www.shatil.org.il/node/add/advertising-a-job-advertisement=== *
===[SEARCH (2/3)]: https://www.bing.com/search?q=דרוש/ה+פקידת+גבעת-חן+Email&qs=n&sp=-1&pq=%d7%93&sc=0-1&sk=&cvid=AD0065E122BA4D3BA69164098163F923&fir=== *
-Split the CrawlData class into 2 classes, to make it more readable. *
-Add to console: '✅' : '❌' (V near total, X near invalid). *
-Change the order of the field counters according to the new console structure. *
-Fix the logic of goals to stop exactly in the goal value itself. *
-Check all types of goals 5 times. *

Tasks: *
====== *
3. Email Address Filter: *
------------------------ *
-Add support of filter specific email address domains - Add 'Filter' on the console status log. *
-Return 'Filter'. *
-Change all relevant files of domains to 'linkDomains' and 'emailAddressDomains'. *
-upperCase goal type. *
-Convert that statuses to be upperCase. *
-Add the 'filterEmailAddressDomain.js' *
-Add logic to not insert the same email to the trending save list. *
-Add the filter email addresses logic. *

Tasks: *
====== *
-Fix all known bugs. *
-If return 'Add' update also the 'Database'. *
-On development mode, empty the dist directory each run. *
-Add settings to drop collection before run on settings.js. *
-When finish the logic of crawl email address, check all kinds of situations: original, fix valid, fix invalid, save, unsave, exists. *
-Check all types of goals: email addresses, minutes, links. *
-Test all the goal cases. *
-Add logic to remove duplicates email addresses before anything else. *
-Make enum of goal types: emailAddresses, time, links. *
-Make the settings of 2 things: the type of goal and the value. The validation of these settings will be numbered. In time it will be minutes. *
-Write a log of each fix being made. The original and the fix - *
 Verify that the logic doesn't destroy email addresses (new line for each, of course). *
-In the bottom line on the console display recent email addresses inserted to the database. *
-Add percentage to the console status line: Total 0/1,000 (0%). *
-The 'Fix' count is only when the fix is valid. In any case, isValid true or false, log to a TXT file. *
-Add logic to add comma and space before the email address, except for the first append. *
-Add the goal type to the console line status. *
-Add logic to goal by number of email addresses / limit time (1 hour for example) / number of processes / number of crawl pages. *
-Log the console status line with the percentage near the field of the goal. Keep the '35/37 (36%)' format always. *

Email address modify service: *
============================= *
-Create the new file. *
-Move all email address stuff to the new service. *
-Move the logic from text.utils.js to the new file. *
-Remove the 'Rename' status - Will be merged with 'Fix'. *
-The result will be returned as the following: - Canceled. *
status (new enum: Add, Exist, Invalid, Rename, Fix, Filter), - Canceled. *
the new email address. The logic will add the counters according to the result. - Canceled. *
-Use booleans instead of enum statuses. *
-On the first fix - break the loop - Canceled. *
-Don't forget to put all of this method inside a promise and perform async await on it. *
-Re-edit all the common mistakes from Jumbo into class with all the mistakes and the domain fix. *
-In the end of each step, return the appropriate result according *
 to check if equal to the original email address. *
-The method will be separated to several functionalities: *
1. Check if the email address is invalid and can be fixed. *
2. Check if the email address domain is valid and need to be renamed. *
3. Check if the email domain is filtered. *
4. Check if it exists and insert it into the database. *

1. Email Address Validation: *
---------------------------- *
-Add validation on email address length: *
'There is a length limit on email addresses. That limit is a maximum of 64 characters (octets) in the 'local part' *
(before the '@') and a maximum of 255 characters (octets) in the domain part (after the '@') for a total length of 320 characters'. *
-Add the new fixed from the source TXT file. *
-Return 'Fix' or 'Invalid'. *

2. Email Address Domain Check: *
------------------------------ *
-At home, search in Jumbo code a task that have common email mistakes: *
 Go to JumboMail website and pull all rows of common mistakes - Send it to gmail. *
-After taking the common mistakes, implement the logic here. *
-This section will be separated into several parts: *
A. Manually Domain Check: *
------------------------- *
-Implement a list of cases and fix and check if it has been replaced. *
B. Auto Typo Check: *
------------------- *
-Remove all specific special characters. *
-Implement the function that fixes typos. *
-Build functions that create auto typo and check that the first function detects and fix all typos. *
-Add a list of valid domains (according to the common mistakes and will be added more later). *
-The fix typo function will be using this list. *
-In the initial step, a random domain will be chosen and typo will be generated and will be tested - Canceled. *
 (If any typo missed - it will throw an exception). *
-Return 'Fix'. *

4. Email Address Save: *
---------------------- *
-Like the logic today. It's the last step. *
-Return 'Add' or 'Exists'. *
-If return 'Add' update also the 'Database'. *

Tasks: *
====== *
-Fix bug with maximum processes, don't stop the loop. *
-Change the console status line: totalCount will be the total email addresses crawled. *
-New counter - 'Save': valid email address, not filter / fix / exists / invalid, that is saved in the database and logged to the TXT file. *
-Implement the logic of crawl email addresses according to the logic of the links service. *
-Add logic to add new counter - 'unsave'. Unsave it when failed to save to the database. Log it to a separated TXT file. *
-Make enum of goal types: emailAddresses, time, links. *
-Add new class with all flags possible for the email address. *
-Fit the logic according to this class. *
-Add also the field of status for logging, for the function on the log.service, so that the results for the log will be sent to the function with the status. *
-All the counters will be updated according to the flags of the result. *
-Add the logic to fit each of the statuses. *
-Order the statuses on the console status line according to the 'status_index.txt' document. *
-The new console status line need to be as the following: *
===Time: 00.00:00:08 | Goal: Email addresses count | Progress: 10/1,000 (5%) | Status: pause=== *
===Process: 1/10 | Page: 1/3 | Link: 9/15 | Links: 47 | Filter Links: 32 | Engine: bing | Key: ליימ יא ריאי-בכוכ דרשמ תלהנמ ה/שורד=== *
===Total: 0 | Save: 0 | Database: 0 | Exists: 0 | Invalid: 0 | Valid Fix: 0 | Invalid Fix: 0 | Unsave: 0 | Filter: 0=== *
===Search Engine URL: https://www.bing.com/search?q=דרוש/ה+מנהלת+משרד+כוכב-יאיר+אי+מייל&qs=n&sp=-1&pq=%d7%93&sc=0-1&sk=&cvid=AD0065E122BA4D3BA6916409816=== *
===URL: https://il.indeed.com/%D7%9E%D7%A0%D7%94%D7%9C-%D7%AA-%D7%97%D7%A9%D7%91%D7%95%D7%A0%D7%95%D7%AA-jobs-in-%D7%91%D7%90%D7%A8-%D7%A9=== *
===Trending Save: orassayag@gmail.com | orassayag@gmail.com | orassayag@gmail.com | orassayag@gmail.com | orassayag@gmail.com=== *
-Load email addresses already fetched to the 'Database' counter. *

Last Email Address Tasks: *
========================= *
-After each fix do a backup and check cases. *
-Fix the fixDomainEnd function. *
-Refactor all 'Micromatch' function into one. *
-Refactor all the functions of substring, substr, split dot, in the generator and in the validation, into textUtils. *
-Change all places in the logic from 'leftPart' to 'localPart' and from 'rightPart' to 'domainPart'. *
-Move all invalid email addresses from the list into the invalid email addresses. *
-Add 'Joi' NPM validation package to the email validation function - Canceled - Not good validation of email addresses. *
-Build file called 'regex.utils' that will store all the regexs. *
-Build file called 'character.utils' that will store all keys of strings. *
-Refactor 'createSimpleValidEmailAddress' function. *
-In the validation method, create keyMap by function id and function name. *
-Add numbers of '-1,-2,-3,-4' to the basic validation method. *
-Add support for removing duplicate '@' characters: (change the function id). *
-Remove the validation after 'fixed.indexOf('@') === -1)'. *
-Add another possible fix, when there are more than '@' - Remove all except the first one. *
-Do all the ToDo points that are related to textUtils. *
-Add another fix function to remove dots in the beginning of the email. *
-Refactor the "console.log(`${icon} | isValid: ${isValid} | original: ${original} | fix: ${fix} | functionIds: ${functionIds}`);" to a function.
-That function will receive property 'isIcon', and will return a string without the console.line. *
-The log will print only the total, the fix, and the invalid into a TXT file. *
-The fix log should look like: 'isValid: true/false | original: | fix: ' + break line. *
-Replace in all the relevant places. *
-Validate that all testings and validations work as expected. *

Logs: *
===== *
-Links: *
-Each link that was crawled, will be logged: link + break line. *
-Email Addresses: *
-Valid: Log valid email addresses in one line, break lines, with ','. Start the first one without ',', but all new email addresses will be with comma separated. *
-Invalid & Fixed (separated files): (check if built a method for this) ${icon} | isValid: ${isValid} | original: ${original} | fix: ${fix} | functionIds: ${functionIds} *

Bonus More Tests: *
================= *
-Build a new service called 'emailAddressesGenerator.service.js' - Canceled. *
-Sandbox with random words package. *
-Convert the 'typosGenerator.service.js' into 'generatorService.js' - Canceled. *
-Create new service called 'emailAddressesGenerator.service'. *
-Add email address settings file and change all places accordingly. *
-generatorService will have 4 functions: getValidEmailAddress() and getInvalidEmailAddresses() - Return accordingly. *
-Change the 'emailAddressTestCases.test.js' accordingly and check it works. *
-And have 2 functions: 'getTypos' and 'getEmailAddresses'. *
-getTypos: *
{ *
localPart: *
domainPart: *
} *
-Each empty will be randomized. *
-Change 'emailAddressTypos.test.js' accordingly and check it. *
-getEmailAddresses() - All options will be inside, since it's a long list of flags. *
-All the settings of this function will be inside. *
-Build all the logic, then add all the flags. *
-There will be 2 main functions: random email address typos *
 (same as today + flag of random name or if not empty - the name selected + load the domainDetails from the generator), random email addresses. *
-The new function will create random email addresses with the following types of email addresses: *
1. Random a number between 100-500 of email addresses to randomize. *
2. Add flags for each type of pairs, to create email addresses of this type. *
3. According to the settings in the previous results. *
4. For each of the pairs, random a number that will all together match the maximum number from the section 1. *
5. Each pair will create a type of email address and will be created from a different function - with the pair comments from here. *
6. For each array, random the type of email addresses. *
7. Each method will return the final email address that has been created, the local part and the domain part. *
8. Random number of emails by the following: *
{ *
  LocalPart: Random letters (settings: valid random size of part, insert numbers randomly, upperCase randomly). *
  DomainPart: Random valid domains from 'isCommonDomain=true' or random domain name with random end, no typos. *
}, *
{ *
  LocalPart: Random letters and randomly replace letters, numbers, special characters (random size of part). *
  DomainPart: Random letters and randomly replace letters, numbers, special characters (random size of part). *
}, *
{ *
  LocalPart: Random letters and randomly replace letters, numbers, special characters (random size of part). *
  DomainPart: TyposGenerator of domain common typos (use domainDetails list for random). *
}, *
{ *
  LocalPart: Random letters and randomly replace letters, numbers, special characters (random size of part). *
  DomainPart: Random common domain typos. IsCommonDomain='false', from the list. *
}, *
{ *
  LocalPart: Random letters and randomly replace letters, numbers, special characters (random size of part). *
  DomainPart: Random common domain typos. IsCommonDomain='true', from the list. *
}, *
{ *
  LocalPart: Merged valid and invalid email addresses lists, random local part of one of them. *
  DomainPart: TyposGenerator of domain common typos (use domainDetails list for random). *
}, *
{ *
  LocalPart: Merged valid and invalid email addresses lists, random local part of one of them. *
  DomainPart: Merged valid and invalid email addresses lists, random domain part of one of them. *
}, *
{ *
  LocalPart: Random letters and randomly replace letters, numbers, special characters (random size of part). *
  DomainPart: TyposGenerator of domain common typos (use domainDetails list for random) + Remove domain end. *
  DomainEnd: Random from 'emailAddressEndFixTypos'. *
}, *
{ *
  LocalPart: Random local part from all of any method. *
  DomainPart: Random local part from all of any method. *
} *
-Convert the modes to 'VALID', 'INVALID', 'RANDOM'. *
-Add another development mode to 'emailAddressTestCases.test.js' and change the logic according to the new enum. *
-Change the logic on 'emailAddressTypos.test.js' accordingly. *
-Refactor the 'emailAddressesGenerator.service' with all the common logics. *
-Build 'emailAddress.utils' for common functions related to email address around the project. *

Fix Common Typos: *
================= *
-Need to be merged into one single list, remove the duplicates, and to keep only the last check, *
 before the validation (this.finalRenameEmailAddressManuallyTypo), and to cancel the check on (this.fixDomainCommonTypos). *

Fix Hardcoded Lists: *
==================== *
-Holding inside the code all kind of lists (email addresses, typos, filter email addresses, filter domains, domain ends, search keys) *
 it's a bad idea, because it's not dynamic, and each change needs to go to the code and change it. Therefore, it needs to be changed to be *
 held in TXT files. *
--emailAddressCommonDomainTypos.js: *
-To hold all the typos in 2 lists and inside the js file it's a bad idea. *
-Need to be merged into one single list, remove the duplicates, and to keep only the last check, *
 before the validation (this.finalRenameEmailAddressManuallyTypo), and to cancel the check on (this.fixDomainCommonTypos). *
--emailAddressesTestCases.js *
-Reload from external files, the valid and the invalid email addresses. *
--emailAddressSettings.js *
-Reload from external files, the *

Fix Typo Bugs: *
============== *
-Add field to CommonDomainTypo called 'domainName' with the name of the domain - Canceled. *
-Move the initiate of the common domains from the link service to the email address service. *
-Create another array of common domains without their end. *
-Create a function that splits the domain from the last '.', and brings back only the domain name. *
-Build another function called 'fixMicromatchTypos'. *
-Build a function that gets a domain, and compare it with the micromatch package to all of the domains without their endings. *
-The 'fixMicromatchTypos' function will contain 4 calls to other functions: compare pure domain with end, *
 remove first letter, remove last letter, and remove all what is not 0-9a-z. After each of these functions *
 will have a call to compare with micromatch. If in any step there is a match, replace the domain and *
 resolve, don't continue with the rest of the functions. *
-Crate another list with all the domain names and the domain end: *
 ['gmail', 'com'], ['hotmail', 'com'], ['outlook', 'com'] (will be generated from the 'initiate link' service). *
-Use micromatch to try to get the domain name. *
-Add the last step: *
a. Compare the domain to a list of common domains. *
b. If match - Resolve. The email address is OK. *
c. If doesn't match to any domain, use a new function: *
1. Split the domain to 2: domain name, domain end. *
2. Remove first and last letters of the domain name and compare (without domain end). If match - Resolve. *
3. Use the 'micromatch' package with the list of all the domain names. If match - Resolve. *
-Try to solve typos of the end domain. *
-Add another validation function - If the email address ends with '.', remove the last character. *
-Build function that checks that the domain part contains ',', replace it with '.'. *
-Fix Common Typos: test@gmail,com *
-Fix all typos bugs. *
-Fix all email address validation bugs. *
-Continue to fill common mistakes for the followings: walla.com | walla.co.il | bezeqint.net *
-In the typo test - Add logic to change 'isValid = false' if the domain doesn't match. *
-Add another field to 'CommonDomainDomainTypo' named 'finalList'. *
-Fill the 'finalList' for each domain. *
-Build another final version to replace common mistakes according to the 'finalList'. *
-After the new implementation - Add more typos to the 'finalList' and re-check. *
-Finish the email address mistakes - Canceled. *
-Remove duplicate cases in 'validEmailAddresses' and 'invalidEmailAddresses' and from the domainCommonTypos list (use online duplicate remover). *
-Refactor all emailAddressValidation.service.js for common logic - Build functions. *
-Build 'testService' to all common functions in all .test.js files - Canceled. *
 (check if repeated logic exists in 'emailAddressValidation.service.js', if so, take from there) - Canceled. *

Tests: *
====== *
-Load all the valid domains list. *
2 types of tests: *

-Email Address Validation: *
========================== *
-a. Loop on the valid email addresses list and check. *
-If invalid, put X. *
-If valid, put V. *
-If fix, put V. *

-Log a score: 43/143 (34%). *

-b. Loop on the invalid email addresses list and check. *
-If invalid, put V. *
-If valid, put X. *
-If fix, put V. *
-Add to console: '✅' : '❌' *

-Log a score: 43/143 (34%). *
-Fix bug with 'undefined' at the end of the email address. *

-Email Address Typo Fix: *
======================== *
-Pick on domain from the valid domains list. *
-use the typo service to generate typos. *
-Loop and check all the typos. *
-If Fix - Log V. *
-If not Fix - Log X. *
-Test all fixes, and fix what needs to be fixed. *

Log a score: 43/143 (34%). *

Tasks: *
====== *
-Remove 'request' package from the project - Not supported any more. *
-Finish the tests of the valid email addresses. *
-Clear symbols '()[]",:;<>\' from the local part of the email address. *
-Add logic that lowercase the domain part. *
-Break all the fix functions to separated functions. *
-Add map key to each of the functions - Canceled. *
-Each functions that the email address changed, add the id of the function. *
-Convert the name of the colors enum to text enum and transfer the V and X to there. *
-Move the V and X to enum. *
-Move the clear space to a function in textUtils.js - Canceled. *
-Make sure that after the email address declared as isValid = false, the function resolves, and not continues. *
-Move the rest of the logic that's left to the email address service - Canceled. *
-Fix bug with invalid fixes between functions. *
-Add a hyphen (as long it's not the first or the last character) to allow special characters on the right side, according to the rules. *
-Add more test cases of invalid with hyphen. *
-Repeat the test of the valid email addresses again to verify no logic has been destroyed. *

More Tasks: *
=========== *
-Change 'generateTypo' to 'typoGenerator.service'. *
-Find out which characters invalid for email addresses. *
-Create function that initiates the validDomainsList, use it both on the logic and the tests. *
-Find a list of all special characters. *
-Random on the typo generator 1-3 (also random) special characters, in additional results. *
-On typo generator - Add the typo special characters on the domain part. *
-Add to CommonDomainTypos 'isCommonDomain'. *
-All to the 5 < put false, the rest put true. *
-From the 'validDomainsList' add missing domains on commonDomainsTypos. *
-Remove the 'validDomainsList'. *
-Generate the list of domains dynamically when uploading from all commonDomainTypos. *

Fresh Tasks: *
============ *
-Convert all search process data into a class that will go back and forward from the logic crawl and the search service. *
-Convert all the statistics and log data into a class that will be updated all the time. *
-Add enum status: INITIATE | FETCH | CRAWL | FINISH. *
-Move all settings in logic into classes. *
-Create log service that will contain all the log functions. *
-New console structure: *
===Time | Status=== *
===Process | Page | Link | Links | Filter Links | Engine | Key + Break=== *
===Total / Goal (0%) | Database | Exists | Invalid | Rename | Fix | Filter + Break=== *
===Search Engine URL + Break=== *
===URL + Break=== *

Tasks:
======
-Console: *
-Find a way to do multi console lines. *
-New console will be: *
Time | Process | Page | Links | Link | Filtered Links | Key + Break *
Total / Goal | Existed | Invalid | Renamed | Fixed | Filtered *

Search Engine + URL service: *
============================ *
-Each link page that fetch email addresses - Log it into a separate file for better track on addresses. *
-Add remove duplicates to the filter domains in the initiate step. *
-Add remove of '/' if the link ends with it, and remove duplicates again. *
-Move the removed duplicates to the text utils. *
-Development mode on: If it's a search engine source - Send the search engine type. If it's a page source - The search engine type parameter will be null. *
-Add each search engine source to a dedicated directory and change the logic accordingly. The page sources are the same as today. *
-Add logic to remove duplicates URLs before anything else. *
-Create the filter list of each search engine according to the pages. *
-Add logic to filter of URLs - Always filter the included all URLs that include the hostname. *
-Remove the default search engine property. *
-Move all URL stuff to the new service. *
-Add logic to add to the console status lines 'Filter Links' - All the links that have been filtered. *
-Add the logic to generate the URL according to the selected search engine. *
-Development mode off: Add logic to check that each search engine is active, and remove it from random if it's not active. *
-Add validation on all active search engines (make sure that they are online with simple requests. If not active - Remove it from random even if it's active). *
-Any URLs that ends with '.' to filter - Except from html, asp, aspx - Build an array of allowed file extensions - Canceled. *
-Development mode off: in the initiate check for each search engine if it's online, and override the 'active' property according to the result. *
-Development mode off: Convert the internet connection check to a global function to check available URLs. *
-Build the logic to a random search engine, and to pull out all the filtered domains (if exists). *
-Make a global filter of URLs - Merge with the specific search engine on the initial step. *
-Add another list of search engine names and the list of filtered links according to the domain (From the filterKeys - Remove it). *
-On each process, random all active search engines (of course check that will work with one active. If not active at all - throw an exception). *
-Remove the filtered links in the current structure. *
-Add logic to check all the search engines available before using it (before random search engines). *
-Add another row, the bottom row - To display the current link (limit characters of course - Canceled). *
-Build an array of file extensions and check if any of the URLs contains them - If so, filter the URL - Canceled. *
-Remove the 'SourceType' enum. The new logic will be - Enum of all search engines (will be inserted as a 'name' field in the search engine configurations). *
-Merge creation of search key, search engine, and templateSearchUrl into one service that does it all. *
-Move all the dynamic keys to new directory - configurations. *
-Create there the new search engine list objects. *
-Change the enum of the search engine list to a list of objects according to the needs. *
-Implement new search engine list: *
name, active, template, query key, page key *
(On first page don't need the page key - remember that). *

Others:
=======
-Replace ' ' with '+' on the search key. *
-Find a dynamic way to random each key from any list inside of a big list, according to the order of the list. *
-Fix all spelling mistakes in all TXT tasks files. *
Remove search engines: (here and in the misc/search_engines.txt) *
yahoo *
aol *
swisscows *
gigablast *
Add search engine: *
startpage *

Old Tasks: *
========== *
-Refactor log process to have the keys colored in yellow - Canceled. *
-Refactor log process to receive 2 parameters: 1 object, 1 array of all the colors by the same order. *
-Add colors to the status console line. *
-Change the name of the database title in the pre process log. *
-Remove the logic to empty the dist directory. *
-Add to each file the date of today, and the time with milliseconds - Keep them before the operation starts. *
-Separate the database name and the collection name to different settings, and replace all over the code. *
-Add colors enum and replace it all over the code. *
-Make sure in the 'crawl.logic.js' file that all parameters declared in the *
 constructor and set up in the setParameters function. *
-Test invalid email address to detect. *
-Write the invalid email addresses each one in a new line. *
-Add line space between each invalid email address in the TXT file. *
-Add more search engines. *
-Add logic to support the paging in any search engine. *
-When exit the program, manually or by exit, if any TXT file exists, *
 remove the last comma (for the current session only) - Canceled. *
-Add validation service for: *
-Add validation on settings parameters. *
-Add the validation on the internet connection from the previous project. *
-Add validation on writing to directories and that directories exist (from previous project). *
-Change 'SEARCH_ENGINE_PAGES_COUNT_PER_PROCESS' to 'MAXIMUM_SEARCH_ENGINE_PAGES_PER_PROCESS_COUNT'. *
-Change to 'SEARCH_ENGINE_TYPE' to 'DEFAULT_SEARCH_ENGINE_TYPE'. *
-Remove dots from titles. *
-Upper case titles + colors. *
-Convert 'logProgress' to receive an array of properties instead of 1 object today. *
-Add colors to the status line: *
-Statuses of validation / initiation - Blue. Exit - Red. Goal reached - Green. *
-Add the search engine to the status line (and remove it from the pre-process log). *
-Add all settings to the settings.js file. *
-Add check with lower case and upper case email. If it's duplicate, and throws an error, check how to fix it. *
-In all places search for a new parameter each line and reformat it. *
-Edit the package.json file and the README.md file. *
-In the README.md - Put a simple guide on how to run this script. *
-Add all the settings of load time and timeout request in *
 the settings.js (and validate it on validation service). *
-Add delay between insert to the database. *
-Fix bug of last process - Won't continue to the last page and last link. *
-Fix bug when reach the maximum number of processes it won't exit. *
-Fix bug of the current process index finishes at 99 instead of 100. *
-Move the interval to separate functions. *
-Set up GOALS (run until you get to 1000 email addresses, for example). *
-Add logic to log goal percentage. *
-Add the reason for exit: Goal Reached / Processes Limit Exceeded. *
-Add logic to skip the process if no links were found. *
-Add limit of key to display, substring to the maximum count length. *
-Add log titles of statuses. *
-In the initial step - Add CRUD operations to test database status. *
-Before start - Log the number of email addresses already exists in the database. *
-Remove the percentage from the log function. *
-Add pre-process log with general status and details. *
-Fix default formatter on VS Code. *
-Separate getSource functions to default and development modes. *
-Do all the ToDo points. *
-Initiate the 2 files (if theirs exists - delete and recreate them). *
-Keep the logic of random search keys. *
-Keep the process and the paging. *
-Keep the filter URL. *
-When invalid email address (after trying to fix logic) - Log to a TXT file. *
-Do fix the email address domain logic. *
-Keep the maximum characters source validation - Canceled. *
-After inserting the database, log to a TXT file. *
-The status need to be always on the screen: *
-Time: 00:45:34 | Links: 3435 | Total: 3945 | Invalid: 34 | Key: *