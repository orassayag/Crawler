/* SECONDARY_BACKUP_PATH,  */
/* 		this.secondaryBackupPath = SECONDARY_BACKUP_PATH; */

//.length > 0
			//if (result.length > 0) {
				//const { MicromatchAction } = require('../../core/enums/files/emailAddress.enum');
					/* 	// Validate that the email address is not a file name.
		validateFileName(validationResult) {
			const { localPart, domainPart } = this.getEmailAddressData(validationResult);
			let invalidPart = null;
			if (!this.validatePartFileName(localPart)) {
				invalidPart = 'Local';
			}
			if (!this.validatePartFileName(domainPart)) {
				invalidPart = 'Domain';
			}
			if (invalidPart) {
				const isValid = validationUtils.isExists(domainEndsDotsList.filter(d => domainPart.indexOf(d) > -1));
				if (!isValid) {
					validationResult.isValid = false;
					validationResult.functionIds.push(this.validationFunctionIdsMap[`validateFileName${invalidPart}Part`]);
				}
			}
			return validationResult;
		} */
					/* 			if (data.invalidPart === PartType.LOCAL) {
							return data.validationResult;
						} */

                        /*         if (!isConnected) {
            throw new Error(`${searchEngineLink} is not available (1000021)`);
		} */

/* 	isSearchEngineActive(searchEngineLink) {
		return new Promise(resolve => {
			dns.lookup(searchEngineLink, (error) => {
				resolve(error ? false : true);
			});
		}).catch();
	}

	async validateSearchEngineActive(searchEngineLink) {
		let isActive = true;
		try {
			isActive = await this.isSearchEngineActive(searchEngineLink);
		} catch (error) { isActive = false; }
		return isActive;
	} */

	//const dns = require('dns');
	/* const { SourceType } = require('../../core/enums/files/search.enum');
const { GoalType } = require('../../core/enums/files/system.enum'); */

/* const { SourceType } = require('../../core/enums/files/search.enum');
const { LogStatus, SaveStatus } = require('../../core/enums/files/emailAddress.enum');
const { GoalType } = require('../../core/enums/files/system.enum'); */

/* Method, */
        //if (linksList && linksList.length > 0) {
            /* const { Color } = require('../core/enums/files/text.enum');
const { Method, Status, GoalType } = require('../core/enums/files/system.enum');
const { DomainsCounterSourceType } = require('../core/enums/files/script.enum'); */
                //this.applicationData.setCrawlStart();

				/* 	setCrawlStart() {
		this.startDateTime = new Date();
	} */

	/* const { Color } = require('../core/enums/files/text.enum'); */

	/* , Step */

	//const { GoalType } = require('../../core/enums/files/system.enum');
/* 'SECONDARY_BACKUP_PATH', */
//'SECONDARY_BACKUP_PATH',
/* APPLICATION_NAME, SECONDARY_BACKUP_PATH,  */
/* 		// ===ROOT PATH=== //
		settings.SECONDARY_BACKUP_PATH = pathUtils.getJoinPath({ targetPath: SECONDARY_BACKUP_PATH, targetName: APPLICATION_NAME }); */
		// ===DYNAMIC PATH=== //
		//const { ScriptType } = require('../../core/enums/files/system.enum');

				//this.isLog = this.pathData.
		/*     // Determine if to log valid email addresses to a TXT file.
			IS_LOG_VALID_EMAIL_ADDRESSES: true,
			// Determine if to log fix email addresses to a TXT file.
			IS_LOG_FIX_EMAIL_ADDRESSES: true,
			// Determine if to log invalid email addresses to a TXT file.
			IS_LOG_INVALID_EMAIL_ADDRESSES: true,
			// Determine if to log unsave email addresses to a TXT file.
			IS_LOG_UNSAVE_EMAIL_ADDRESSES: true,
			// Determine if to log crawl links to a TXT file.
			IS_LOG_CRAWL_LINKS: true,
			// Determine if to log crawl error links to a TXT file.
			IS_LOG_CRAWL_ERROR_LINKS: true, */
		/* 			(this.logData.isLogValidEmailAddresses || this.logData.isLogFixEmailAddresses ||
						this.logData.isLogInvalidEmailAddresses || this.logData.isLogUnsaveEmailAddresses || this.logData.isLogCrawlLinks ||
						this.logData.isLogCrawlErrorLinks); */
//.length > 0
/* const { Color } = require('../../core/enums/files/text.enum');
const { LogStatus } = require('../../core/enums/files/emailAddress.enum');
const { StatusIcon } = require('../../core/enums/files/text.enum');
const { Placeholder } = require('../../core/enums/files/placeholder.enum');
const { Step } = require('../../core/enums/files/system.enum'); */

/* const { Color } = require('../core/enums/files/text.enum'); */

/*                 '--single-process',
                '--no-zygote',
                '--no-sandbox', */
                //const systemUtils = require('../../utils/files/system.utils');
/* const { Color } = require('../../core/enums/files/text.enum'); */

/* const { SourceType } = require('../../core/enums/files/search.enum'); */

//const { SaveStatus } = require('../../core/enums/files/emailAddress.enum');
        //console.log(isRunning);
        /* isRunning('chrome.exe', (status) => {
    console.log(status); // true|false
}) */

//.length > 0
/* const { SearchPlaceHolder } = require('../../core/enums/files/search.enum');
const { SearchKeyGender } = require('../../core/enums/files/search.enum'); */

/* const { PartType } = require('../../core/enums/files/emailAddress.enum'); */

//const { fileUtils } = require('../utils');
    //await fileUtils.emptyDirectory(`C:\\Or\\Web\\crawler\\backups`);
/* const { regexUtils } = require('../utils'); */
/*     const data = 'https://WWW.TEST.COMtest@test.com';
    const test = data.toString().match(regexUtils.findLinkRegex);
    console.log(test); */
/* cSpell:disable */
/*     const getFrequencies = str => {
        let dict = new Set(str);
        return [...dict].map(chr => {
            return str.match(new RegExp(chr, 'g')).length;
        });
    };

    // Measure the entropy of a string in bits per symbol.
    const entropy = str => getFrequencies(str)
        .reduce((sum, frequency) => {
            let p = frequency / str.length;
            return sum - (p * Math.log(p) / Math.log(2));
        }, 0);

    const strings = ['14370afcdc17429f9e418d5ffbd0334a', 'or', 'sdf', 'test', 'dave coperfield', 'gmail', 'ce06e817-2149-6cfd-dd24-51b31e93ea1a',
        '87c0d782-e09f-056f-f544-c6ec9d17943c', 'space-max', 'ns3160176.ip-151-106-35',
        'ds4-f1g-54-h5-dfg-yk-4gd-htr5-fdg5h', 'outlook', 'h-rt-dfg4-sv6-fg32-dsv5-vfd5-ds312', 'system-analytics', '454-fs-ns-dff4-xhh-43d-frfs'];

    for (let i = 0; i < strings.length; i++) {
        const str = strings[i];
        let result = 0;
        try {
            result = entropy(str);
        }
        catch (error) { result = 0; }
        console.log(`Entropy of '${str}' in bits per symbol:`, result);
    } */

    //const strings = emailAddressesGeneratorService.getValidEmailAddress();
/* const { textUtils } = require('../utils');
console.log(textUtils.addLeadingZero()); */

/* cSpell:disable */
/*     const { emailAddressesGeneratorService } = require('../services');
    await emailAddressesGeneratorService.initiate(); */


/*     // Calculate the Shannon entropy of a string in bits per symbol.


    // Measure the entropy of a string in total bits.
    //shannon.bits = str => shannon.entropy(str) * str.length;

    // Log the entropy of a string to the console.
    //shannon.log = str => console.log(`Entropy of '${str}' in bits per symbol:`, shannon.entropy(str)); */

	/* , ScriptType */
/* const ScriptType = enumUtils.createEnum([
    ['DOMAINS_COUNTER', 'domains_counter']
]); */


/*     // Determine the path for the directory of which a secondary backup will be created.
    // (Working example: 'G:\\Or\\Web\\crawler').
    SECONDARY_BACKUP_PATH: 'G:/Or/Web/crawler', */
    /* const { GoalType } = require('../core/enums/files/system.enum'); */

	/* const { StatusIcon } = require('../core/enums/files/text.enum');
const { TestType } = require('../core/enums/files/emailAddress.enum'); */

/* const { ColorCode } = require('../../core/enums/files/text.enum'); */

/*     // This method check if a receive target path is accessible.
    isPathAccessible(targetPath) {
        // Verify that the path exists.
        this.isPathExistsError(targetPath);
        // Check if the path is readable.
        const errorRead = fs.accessSync(targetPath, fs.constants.R_OK);
        if (errorRead) {
            throw new Error(`targetPath not readable: ${targetPath} (1000030)`);
        }
        // Check if the path is writable.
        const errorWrite = fs.accessSync(targetPath, fs.constants.W_OK);
        if (errorWrite) {
            throw new Error(`targetPath not writable: ${targetPath} (1000031)`);
        }
    } */

	/* const { Color } = require('../../core/enums/files/text.enum'); */

	/* const { Mode } = require('../../core/enums/files/system.enum'); */

	/* const { SearchEngineType, SearchPlaceHolder } = require('../core/enums/files/search.enum'); */

	/* const { SearchEngineType } = require('../core/enums/files/search.enum'); */

	 //ScriptType.DOMAINS_COUNTER
/* const { ScriptType, DomainsCounterSourceType } = require('../../core/enums/files/script.enum');
const { Color } = require('../../core/enums/files/text.enum'); */

/* SECONDARY_BACKUP_PATH,  */

//const { SearchKeyType } = require('../core/enums/files/search.enum');
//const { DomainsCounterSourceType } = require('../core/enums/files/script.enum');
                        //case 'n': resolve(false); break;

						//-test@bmc.gov_.il_ID606767_2_P1010023-110x75.jpg
//test@test-ha...ni.il'
//test-test@yahoogroups.com
//test@eca.gov.il012-3456789
//'test@pbs-is...' //'test@y...'
//Validate cases like yyyyyyyy@gggg.ggg.ggg | 222@333.com | s@s.com
//imagesloaded@4.1, flickity@2.0, webflow-util@1.0
//'font-awesome@5.11.2', 'react-dom@16.13.1', 'bootstrap@4.5.2', 'moment-duration-format@2.3.2'
//.length > 0;
//const { PartType } = require('../core/enums/files/emailAddress.enum');
//const { StatusIcon } = require('../core/enums/files/text.enum');