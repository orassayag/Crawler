require('../services/files/initiate.service').initiate('test');
const { PartTypeEnum } = require('../core/enums');
const { emailAddressesGeneratorService, logService } = require('../services');

(async () => {
    const results = [];
    await emailAddressesGeneratorService.initiate();
    results.push({ name: 'createEmailAddress()', result: await emailAddressesGeneratorService.createEmailAddress() });
    results.push({ name: 'createLocalPart()', result: await emailAddressesGeneratorService.createLocalPart() });
    results.push({ name: 'createDomainPart()', result: await emailAddressesGeneratorService.createDomainPart() });
    results.push({ name: 'createMongoDatabaseEmailAddress()', result: await emailAddressesGeneratorService.createMongoDatabaseEmailAddress() });
    results.push({ name: 'createSimpleValidEmailAddress()', result: emailAddressesGeneratorService.createSimpleValidEmailAddress() });
    results.push({ name: 'createEmailAddressNPMFaker()', result: emailAddressesGeneratorService.createEmailAddressNPMFaker() });
    results.push({ name: 'createEmailAddressNPMRandomEmail()', result: emailAddressesGeneratorService.createEmailAddressNPMRandomEmail() });
    results.push({ name: 'createEmailAddressNPMChance()', result: emailAddressesGeneratorService.createEmailAddressNPMChance() });
    results.push({ name: 'createEmailAddressMispelledPartsListEnds()', result: emailAddressesGeneratorService.createEmailAddressMispelledPartsListEnds() });
    results.push({ name: 'createDomainPartLists()', result: emailAddressesGeneratorService.createDomainPartLists() });
    results.push({ name: 'createDomainPartDomainsDetails()', result: emailAddressesGeneratorService.createDomainPartDomainsDetails() });
    results.push({ name: 'createDomainPartNPMFaker()', result: emailAddressesGeneratorService.createDomainPartNPMFaker() });
    results.push({ name: 'createDomainPartNPMChance()', result: emailAddressesGeneratorService.createDomainPartNPMChance() });
    results.push({ name: 'createRandomPartLists(PartTypeEnum.LOCAL)', result: emailAddressesGeneratorService.createRandomPartLists(PartTypeEnum.LOCAL) });
    results.push({ name: 'createRandomPartLists(PartTypeEnum.DOMAIN)', result: emailAddressesGeneratorService.createRandomPartLists(PartTypeEnum.DOMAIN) });
    results.push({ name: 'createRandomPartNPM(PartTypeEnum.LOCAL)', result: emailAddressesGeneratorService.createRandomPartNPM(PartTypeEnum.LOCAL) });
    results.push({ name: 'createRandomPartNPM(PartTypeEnum.DOMAIN)', result: emailAddressesGeneratorService.createRandomPartNPM(PartTypeEnum.DOMAIN) });
    results.push({ name: 'createRandomPartNPMLoremIpsum()', result: emailAddressesGeneratorService.createRandomPartNPMLoremIpsum() });
    results.push({ name: 'createRandomPartNPMChance()', result: emailAddressesGeneratorService.createRandomPartNPMChance() });
    results.push({ name: 'createRandomPartNPMFaker()', result: emailAddressesGeneratorService.createRandomPartNPMFaker() });
    results.push({ name: 'createRandomPartTypo()', result: await emailAddressesGeneratorService.createRandomPartTypo() });
    results.push({ name: 'createRandomPartUUID()', result: emailAddressesGeneratorService.createRandomPartUUID() });
    results.push({ name: 'createRandomPartManually(PartTypeEnum.LOCAL)', result: emailAddressesGeneratorService.createRandomPartManually(PartTypeEnum.LOCAL) });
    results.push({ name: 'createRandomPartManually(PartTypeEnum.DOMAIN)', result: emailAddressesGeneratorService.createRandomPartManually(PartTypeEnum.DOMAIN) });
    results.push({ name: 'createRandomPartNPMRandomWords(PartTypeEnum.LOCAL)', result: emailAddressesGeneratorService.createRandomPartNPMRandomWords(PartTypeEnum.LOCAL) });
    results.push({ name: 'createRandomPartNPMRandomWords(PartTypeEnum.DOMAIN)', result: emailAddressesGeneratorService.createRandomPartNPMRandomWords(PartTypeEnum.DOMAIN) });
    await emailAddressesGeneratorService.done();
    results.map(result => logService.logGeneratorResult(result));
})();